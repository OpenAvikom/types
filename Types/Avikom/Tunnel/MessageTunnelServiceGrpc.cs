// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/tunnel/message_tunnel_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Avikom.Types.Tunnel {
  /// <summary>
  ///*
  /// This services allows clients behind a firewall to offer their services in the AVIKOM network.
  /// @author Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public static partial class MessageTunnelService
  {
    static readonly string __ServiceName = "avikom.tunnel.MessageTunnelService";

    static readonly grpc::Marshaller<global::Avikom.Types.Tunnel.ClientToServer> __Marshaller_avikom_tunnel_ClientToServer = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Tunnel.ClientToServer.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Tunnel.ServerToClient> __Marshaller_avikom_tunnel_ServerToClient = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Tunnel.ServerToClient.Parser.ParseFrom);

    static readonly grpc::Method<global::Avikom.Types.Tunnel.ClientToServer, global::Avikom.Types.Tunnel.ServerToClient> __Method_RegisterTunneled = new grpc::Method<global::Avikom.Types.Tunnel.ClientToServer, global::Avikom.Types.Tunnel.ServerToClient>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "RegisterTunneled",
        __Marshaller_avikom_tunnel_ClientToServer,
        __Marshaller_avikom_tunnel_ServerToClient);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Avikom.Types.Tunnel.MessageTunnelServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of MessageTunnelService</summary>
    [grpc::BindServiceMethod(typeof(MessageTunnelService), "BindService")]
    public abstract partial class MessageTunnelServiceBase
    {
      /// <summary>
      //// Register a peer with a tunneled server connection.
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="responseStream">Used for sending responses back to the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>A task indicating completion of the handler.</returns>
      public virtual global::System.Threading.Tasks.Task RegisterTunneled(grpc::IAsyncStreamReader<global::Avikom.Types.Tunnel.ClientToServer> requestStream, grpc::IServerStreamWriter<global::Avikom.Types.Tunnel.ServerToClient> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for MessageTunnelService</summary>
    public partial class MessageTunnelServiceClient : grpc::ClientBase<MessageTunnelServiceClient>
    {
      /// <summary>Creates a new client for MessageTunnelService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MessageTunnelServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MessageTunnelService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MessageTunnelServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MessageTunnelServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MessageTunnelServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// Register a peer with a tunneled server connection.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Avikom.Types.Tunnel.ClientToServer, global::Avikom.Types.Tunnel.ServerToClient> RegisterTunneled(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterTunneled(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// Register a peer with a tunneled server connection.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::Avikom.Types.Tunnel.ClientToServer, global::Avikom.Types.Tunnel.ServerToClient> RegisterTunneled(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_RegisterTunneled, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MessageTunnelServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MessageTunnelServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(MessageTunnelServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_RegisterTunneled, serviceImpl.RegisterTunneled).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, MessageTunnelServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_RegisterTunneled, serviceImpl == null ? null : new grpc::DuplexStreamingServerMethod<global::Avikom.Types.Tunnel.ClientToServer, global::Avikom.Types.Tunnel.ServerToClient>(serviceImpl.RegisterTunneled));
    }

  }
}
#endregion
