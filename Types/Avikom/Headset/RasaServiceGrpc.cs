// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/headset/rasa_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Avikom.Types.Headset {
  /// <summary>
  ///*
  /// This service manages the user input provided through speech and text.
  /// @author Lars Schalkwijk &lt;lars.schalkwijk@fh-bielefeld.de>
  /// </summary>
  public static partial class RasaService
  {
    static readonly string __ServiceName = "avikom.headset.RasaService";

    static readonly grpc::Marshaller<global::Avikom.Types.Headset.RasaMessage> __Marshaller_avikom_headset_RasaMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Headset.RasaMessage.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Generic.Result> __Marshaller_avikom_generic_Result = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Generic.Result.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Headset.RasaQuery> __Marshaller_avikom_headset_RasaQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Headset.RasaQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Headset.RasaResult> __Marshaller_avikom_headset_RasaResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Headset.RasaResult.Parser.ParseFrom);

    static readonly grpc::Method<global::Avikom.Types.Headset.RasaMessage, global::Avikom.Types.Generic.Result> __Method_SetIntent = new grpc::Method<global::Avikom.Types.Headset.RasaMessage, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetIntent",
        __Marshaller_avikom_headset_RasaMessage,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Headset.RasaQuery, global::Avikom.Types.Headset.RasaResult> __Method_GetIntents = new grpc::Method<global::Avikom.Types.Headset.RasaQuery, global::Avikom.Types.Headset.RasaResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetIntents",
        __Marshaller_avikom_headset_RasaQuery,
        __Marshaller_avikom_headset_RasaResult);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Avikom.Types.Headset.RasaServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RasaService</summary>
    [grpc::BindServiceMethod(typeof(RasaService), "BindService")]
    public abstract partial class RasaServiceBase
    {
      /// <summary>
      //// tries to use the provided information to resolve a task step 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> SetIntent(global::Avikom.Types.Headset.RasaMessage request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// returns all intents that can be used to resolve the current task step
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Headset.RasaResult> GetIntents(global::Avikom.Types.Headset.RasaQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RasaService</summary>
    public partial class RasaServiceClient : grpc::ClientBase<RasaServiceClient>
    {
      /// <summary>Creates a new client for RasaService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RasaServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RasaService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RasaServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RasaServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RasaServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// tries to use the provided information to resolve a task step 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result SetIntent(global::Avikom.Types.Headset.RasaMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIntent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// tries to use the provided information to resolve a task step 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result SetIntent(global::Avikom.Types.Headset.RasaMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetIntent, null, options, request);
      }
      /// <summary>
      //// tries to use the provided information to resolve a task step 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SetIntentAsync(global::Avikom.Types.Headset.RasaMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetIntentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// tries to use the provided information to resolve a task step 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SetIntentAsync(global::Avikom.Types.Headset.RasaMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetIntent, null, options, request);
      }
      /// <summary>
      //// returns all intents that can be used to resolve the current task step
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Headset.RasaResult GetIntents(global::Avikom.Types.Headset.RasaQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIntents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns all intents that can be used to resolve the current task step
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Headset.RasaResult GetIntents(global::Avikom.Types.Headset.RasaQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetIntents, null, options, request);
      }
      /// <summary>
      //// returns all intents that can be used to resolve the current task step
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Headset.RasaResult> GetIntentsAsync(global::Avikom.Types.Headset.RasaQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetIntentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns all intents that can be used to resolve the current task step
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Headset.RasaResult> GetIntentsAsync(global::Avikom.Types.Headset.RasaQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetIntents, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RasaServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RasaServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RasaServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SetIntent, serviceImpl.SetIntent)
          .AddMethod(__Method_GetIntents, serviceImpl.GetIntents).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RasaServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SetIntent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Headset.RasaMessage, global::Avikom.Types.Generic.Result>(serviceImpl.SetIntent));
      serviceBinder.AddMethod(__Method_GetIntents, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Headset.RasaQuery, global::Avikom.Types.Headset.RasaResult>(serviceImpl.GetIntents));
    }

  }
}
#endregion
