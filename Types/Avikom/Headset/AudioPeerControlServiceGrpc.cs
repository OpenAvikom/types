// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/headset/audio_peer_control_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Avikom.Types.Headset {
  /// <summary>
  ///*
  /// This service controls an auditory peer. It can be used to trigger sounds, speech output or change 
  /// the mode of the auditory peer.
  /// @author: Lars Schalkwijk &lt;lars.schalkwijk@fh-bielefeld.de>
  /// </summary>
  public static partial class AudioPeerControlService
  {
    static readonly string __ServiceName = "avikom.headset.AudioPeerControlService";

    static readonly grpc::Marshaller<global::Avikom.Types.Headset.AudioPeerModeRequest> __Marshaller_avikom_headset_AudioPeerModeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Headset.AudioPeerModeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Generic.Result> __Marshaller_avikom_generic_Result = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Generic.Result.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Headset.FunctionalSoundRequest> __Marshaller_avikom_headset_FunctionalSoundRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Headset.FunctionalSoundRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Headset.SayRequest> __Marshaller_avikom_headset_SayRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Headset.SayRequest.Parser.ParseFrom);

    static readonly grpc::Method<global::Avikom.Types.Headset.AudioPeerModeRequest, global::Avikom.Types.Generic.Result> __Method_SetMode = new grpc::Method<global::Avikom.Types.Headset.AudioPeerModeRequest, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetMode",
        __Marshaller_avikom_headset_AudioPeerModeRequest,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Headset.FunctionalSoundRequest, global::Avikom.Types.Generic.Result> __Method_PlaySound = new grpc::Method<global::Avikom.Types.Headset.FunctionalSoundRequest, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PlaySound",
        __Marshaller_avikom_headset_FunctionalSoundRequest,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Headset.SayRequest, global::Avikom.Types.Generic.Result> __Method_Say = new grpc::Method<global::Avikom.Types.Headset.SayRequest, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Say",
        __Marshaller_avikom_headset_SayRequest,
        __Marshaller_avikom_generic_Result);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Avikom.Types.Headset.AudioPeerControlServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AudioPeerControlService</summary>
    [grpc::BindServiceMethod(typeof(AudioPeerControlService), "BindService")]
    public abstract partial class AudioPeerControlServiceBase
    {
      /// <summary>
      //// sets the mode of the auditory peer. 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> SetMode(global::Avikom.Types.Headset.AudioPeerModeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// triggers immediate playback of a sound. 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> PlaySound(global::Avikom.Types.Headset.FunctionalSoundRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// triggers generation of TTS output and playback on the auditory peer.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> Say(global::Avikom.Types.Headset.SayRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AudioPeerControlService</summary>
    public partial class AudioPeerControlServiceClient : grpc::ClientBase<AudioPeerControlServiceClient>
    {
      /// <summary>Creates a new client for AudioPeerControlService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AudioPeerControlServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AudioPeerControlService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AudioPeerControlServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AudioPeerControlServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AudioPeerControlServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// sets the mode of the auditory peer. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result SetMode(global::Avikom.Types.Headset.AudioPeerModeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetMode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// sets the mode of the auditory peer. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result SetMode(global::Avikom.Types.Headset.AudioPeerModeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetMode, null, options, request);
      }
      /// <summary>
      //// sets the mode of the auditory peer. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SetModeAsync(global::Avikom.Types.Headset.AudioPeerModeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetModeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// sets the mode of the auditory peer. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SetModeAsync(global::Avikom.Types.Headset.AudioPeerModeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetMode, null, options, request);
      }
      /// <summary>
      //// triggers immediate playback of a sound. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result PlaySound(global::Avikom.Types.Headset.FunctionalSoundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlaySound(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// triggers immediate playback of a sound. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result PlaySound(global::Avikom.Types.Headset.FunctionalSoundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PlaySound, null, options, request);
      }
      /// <summary>
      //// triggers immediate playback of a sound. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> PlaySoundAsync(global::Avikom.Types.Headset.FunctionalSoundRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlaySoundAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// triggers immediate playback of a sound. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> PlaySoundAsync(global::Avikom.Types.Headset.FunctionalSoundRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PlaySound, null, options, request);
      }
      /// <summary>
      //// triggers generation of TTS output and playback on the auditory peer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result Say(global::Avikom.Types.Headset.SayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Say(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// triggers generation of TTS output and playback on the auditory peer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result Say(global::Avikom.Types.Headset.SayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Say, null, options, request);
      }
      /// <summary>
      //// triggers generation of TTS output and playback on the auditory peer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SayAsync(global::Avikom.Types.Headset.SayRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SayAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// triggers generation of TTS output and playback on the auditory peer.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SayAsync(global::Avikom.Types.Headset.SayRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Say, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AudioPeerControlServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AudioPeerControlServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AudioPeerControlServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SetMode, serviceImpl.SetMode)
          .AddMethod(__Method_PlaySound, serviceImpl.PlaySound)
          .AddMethod(__Method_Say, serviceImpl.Say).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AudioPeerControlServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SetMode, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Headset.AudioPeerModeRequest, global::Avikom.Types.Generic.Result>(serviceImpl.SetMode));
      serviceBinder.AddMethod(__Method_PlaySound, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Headset.FunctionalSoundRequest, global::Avikom.Types.Generic.Result>(serviceImpl.PlaySound));
      serviceBinder.AddMethod(__Method_Say, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Headset.SayRequest, global::Avikom.Types.Generic.Result>(serviceImpl.Say));
    }

  }
}
#endregion
