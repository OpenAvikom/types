// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/generic/peer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Avikom.Types.Generic {

  /// <summary>Holder for reflection information generated from avikom/generic/peer.proto</summary>
  public static partial class PeerReflection {

    #region Descriptor
    /// <summary>File descriptor for avikom/generic/peer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PeerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chlhdmlrb20vZ2VuZXJpYy9wZWVyLnByb3RvEg5hdmlrb20uZ2VuZXJpYxoc",
            "YXZpa29tL29wdGlvbnMvb3B0aW9ucy5wcm90bxohYXZpa29tL2dlbmVyaWMv",
            "cnBjX2VuZHBvaW50LnByb3RvGhlhdmlrb20vZ2VuZXJpYy91c2VyLnByb3Rv",
            "Gh1hdmlrb20vZ2VuZXJpYy9tb2RhbGl0eS5wcm90byL3AQoEUGVlchIUCgRu",
            "YW1lGAEgASgJQgaKtRgCEAESCgoCaXAYAiABKAkSEQoJaG9zdF9uYW1lGAMg",
            "ASgJEgwKBHBvcnQYBCABKAUSIgoEdXNlchgGIAEoCzIULmF2aWtvbS5nZW5l",
            "cmljLlVzZXISLwoNbW9kYWxfZml0bmVzcxgHIAEoCzIYLmF2aWtvbS5nZW5l",
            "cmljLk1vZGFsaXR5Eg8KB2dhdGV3YXkYCCABKAkSEAoIc2VydmljZXMYCiAD",
            "KAkSLgoJZW5kcG9pbnRzGAsgAygOMhsuYXZpa29tLmdlbmVyaWMuUnBjRW5k",
            "cG9pbnQ6BIi1GAEiLwoIUGVlckxpc3QSIwoFcGVlcnMYASADKAsyFC5hdmlr",
            "b20uZ2VuZXJpYy5QZWVyQmwKGGFwcC5hdmlrb20udHlwZXMuZ2VuZXJpY1o5",
            "Z2l0bGFiLnViLnVuaS1iaWVsZWZlbGQuZGUvYXZpa29tL2dvLXR5cGVzL2F2",
            "aWtvbS9nZW5lcmljqgIUQXZpa29tLlR5cGVzLkdlbmVyaWNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Avikom.Types.Options.OptionsReflection.Descriptor, global::Avikom.Types.Generic.RpcEndpointReflection.Descriptor, global::Avikom.Types.Generic.UserReflection.Descriptor, global::Avikom.Types.Generic.ModalityReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Avikom.Types.Generic.Peer), global::Avikom.Types.Generic.Peer.Parser, new[]{ "Name", "Ip", "HostName", "Port", "User", "ModalFitness", "Gateway", "Services", "Endpoints" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Avikom.Types.Generic.PeerList), global::Avikom.Types.Generic.PeerList.Parser, new[]{ "Peers" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// A representation of a service system to connect to or to exchange data with.
  /// @author Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public sealed partial class Peer : pb::IMessage<Peer> {
    private static readonly pb::MessageParser<Peer> _parser = new pb::MessageParser<Peer>(() => new Peer());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Peer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Avikom.Types.Generic.PeerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Peer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Peer(Peer other) : this() {
      name_ = other.name_;
      ip_ = other.ip_;
      hostName_ = other.hostName_;
      port_ = other.port_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      modalFitness_ = other.modalFitness_ != null ? other.modalFitness_.Clone() : null;
      gateway_ = other.gateway_;
      services_ = other.services_.Clone();
      endpoints_ = other.endpoints_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Peer Clone() {
      return new Peer(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    //// unique identifier of peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    private string ip_ = "";
    /// <summary>
    //// the ip under which the peer can be reached
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "host_name" field.</summary>
    public const int HostNameFieldNumber = 3;
    private string hostName_ = "";
    /// <summary>
    //// name of the host; only interpreted if ip not set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HostName {
      get { return hostName_; }
      set {
        hostName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 4;
    private int port_;
    /// <summary>
    //// port under which the peer can be reached
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 6;
    private global::Avikom.Types.Generic.User user_;
    /// <summary>
    //// the user currently associated with that peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Avikom.Types.Generic.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "modal_fitness" field.</summary>
    public const int ModalFitnessFieldNumber = 7;
    private global::Avikom.Types.Generic.Modality modalFitness_;
    /// <summary>
    //// the modality or combination of modalities the peer supports
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Avikom.Types.Generic.Modality ModalFitness {
      get { return modalFitness_; }
      set {
        modalFitness_ = value;
      }
    }

    /// <summary>Field number for the "gateway" field.</summary>
    public const int GatewayFieldNumber = 8;
    private string gateway_ = "";
    /// <summary>
    //// a gateway URL in cases where the peer cannot be reached directly
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Gateway {
      get { return gateway_; }
      set {
        gateway_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "services" field.</summary>
    public const int ServicesFieldNumber = 10;
    private static readonly pb::FieldCodec<string> _repeated_services_codec
        = pb::FieldCodec.ForString(82);
    private readonly pbc::RepeatedField<string> services_ = new pbc::RepeatedField<string>();
    /// <summary>
    //// a list of services the peer provides for task step resolution
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Services {
      get { return services_; }
    }

    /// <summary>Field number for the "endpoints" field.</summary>
    public const int EndpointsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Avikom.Types.Generic.RpcEndpoint> _repeated_endpoints_codec
        = pb::FieldCodec.ForEnum(90, x => (int) x, x => (global::Avikom.Types.Generic.RpcEndpoint) x);
    private readonly pbc::RepeatedField<global::Avikom.Types.Generic.RpcEndpoint> endpoints_ = new pbc::RepeatedField<global::Avikom.Types.Generic.RpcEndpoint>();
    /// <summary>
    //// a list of endpoints that are provied by the peer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Avikom.Types.Generic.RpcEndpoint> Endpoints {
      get { return endpoints_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Peer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Peer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Ip != other.Ip) return false;
      if (HostName != other.HostName) return false;
      if (Port != other.Port) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(ModalFitness, other.ModalFitness)) return false;
      if (Gateway != other.Gateway) return false;
      if(!services_.Equals(other.services_)) return false;
      if(!endpoints_.Equals(other.endpoints_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (HostName.Length != 0) hash ^= HostName.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (modalFitness_ != null) hash ^= ModalFitness.GetHashCode();
      if (Gateway.Length != 0) hash ^= Gateway.GetHashCode();
      hash ^= services_.GetHashCode();
      hash ^= endpoints_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Ip.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Ip);
      }
      if (HostName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(HostName);
      }
      if (Port != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Port);
      }
      if (user_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(User);
      }
      if (modalFitness_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(ModalFitness);
      }
      if (Gateway.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Gateway);
      }
      services_.WriteTo(output, _repeated_services_codec);
      endpoints_.WriteTo(output, _repeated_endpoints_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (HostName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HostName);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (modalFitness_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModalFitness);
      }
      if (Gateway.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Gateway);
      }
      size += services_.CalculateSize(_repeated_services_codec);
      size += endpoints_.CalculateSize(_repeated_endpoints_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Peer other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.HostName.Length != 0) {
        HostName = other.HostName;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::Avikom.Types.Generic.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.modalFitness_ != null) {
        if (modalFitness_ == null) {
          ModalFitness = new global::Avikom.Types.Generic.Modality();
        }
        ModalFitness.MergeFrom(other.ModalFitness);
      }
      if (other.Gateway.Length != 0) {
        Gateway = other.Gateway;
      }
      services_.Add(other.services_);
      endpoints_.Add(other.endpoints_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Ip = input.ReadString();
            break;
          }
          case 26: {
            HostName = input.ReadString();
            break;
          }
          case 32: {
            Port = input.ReadInt32();
            break;
          }
          case 50: {
            if (user_ == null) {
              User = new global::Avikom.Types.Generic.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 58: {
            if (modalFitness_ == null) {
              ModalFitness = new global::Avikom.Types.Generic.Modality();
            }
            input.ReadMessage(ModalFitness);
            break;
          }
          case 66: {
            Gateway = input.ReadString();
            break;
          }
          case 82: {
            services_.AddEntriesFrom(input, _repeated_services_codec);
            break;
          }
          case 90:
          case 88: {
            endpoints_.AddEntriesFrom(input, _repeated_endpoints_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A list of peers that is commonly associated with steps and or runtime task steps.
  /// @author Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public sealed partial class PeerList : pb::IMessage<PeerList> {
    private static readonly pb::MessageParser<PeerList> _parser = new pb::MessageParser<PeerList>(() => new PeerList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PeerList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Avikom.Types.Generic.PeerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerList(PeerList other) : this() {
      peers_ = other.peers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PeerList Clone() {
      return new PeerList(this);
    }

    /// <summary>Field number for the "peers" field.</summary>
    public const int PeersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Avikom.Types.Generic.Peer> _repeated_peers_codec
        = pb::FieldCodec.ForMessage(10, global::Avikom.Types.Generic.Peer.Parser);
    private readonly pbc::RepeatedField<global::Avikom.Types.Generic.Peer> peers_ = new pbc::RepeatedField<global::Avikom.Types.Generic.Peer>();
    /// <summary>
    //// A list of peers. 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Avikom.Types.Generic.Peer> Peers {
      get { return peers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PeerList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PeerList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!peers_.Equals(other.peers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= peers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      peers_.WriteTo(output, _repeated_peers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += peers_.CalculateSize(_repeated_peers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PeerList other) {
      if (other == null) {
        return;
      }
      peers_.Add(other.peers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            peers_.AddEntriesFrom(input, _repeated_peers_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
