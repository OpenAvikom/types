// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/assistance/session_storage_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Avikom.Types.Assistance {
  /// <summary>
  ///*
  /// A service to store, alter and retrieve sessions.
  /// @author Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public static partial class SessionStorageService
  {
    static readonly string __ServiceName = "avikom.assistance.SessionStorageService";

    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.Session> __Marshaller_avikom_assistance_Session = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.Session.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Generic.Result> __Marshaller_avikom_generic_Result = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Generic.Result.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.SessionQuery> __Marshaller_avikom_assistance_SessionQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.SessionQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.SessionList> __Marshaller_avikom_assistance_SessionList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.SessionList.Parser.ParseFrom);

    static readonly grpc::Method<global::Avikom.Types.Assistance.Session, global::Avikom.Types.Generic.Result> __Method_SaveSession = new grpc::Method<global::Avikom.Types.Assistance.Session, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SaveSession",
        __Marshaller_avikom_assistance_Session,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Assistance.Session> __Method_GetSession = new grpc::Method<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Assistance.Session>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSession",
        __Marshaller_avikom_assistance_SessionQuery,
        __Marshaller_avikom_assistance_Session);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Assistance.SessionList> __Method_GetAllSessions = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Assistance.SessionList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllSessions",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_avikom_assistance_SessionList);

    static readonly grpc::Method<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Generic.Result> __Method_DeleteSession = new grpc::Method<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSession",
        __Marshaller_avikom_assistance_SessionQuery,
        __Marshaller_avikom_generic_Result);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Avikom.Types.Assistance.SessionStorageServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SessionStorageService</summary>
    [grpc::BindServiceMethod(typeof(SessionStorageService), "BindService")]
    public abstract partial class SessionStorageServiceBase
    {
      /// <summary>
      //// stores a sesion; if it exists it will be updated.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> SaveSession(global::Avikom.Types.Assistance.Session request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// retrieves a single session; `SessionQuery` must return a single session
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Assistance.Session> GetSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// returns all currently stored sessions
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Assistance.SessionList> GetAllSessions(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// deletes (a) session(s); deletes all sessions that fulfill `SessionQuery`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> DeleteSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SessionStorageService</summary>
    public partial class SessionStorageServiceClient : grpc::ClientBase<SessionStorageServiceClient>
    {
      /// <summary>Creates a new client for SessionStorageService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SessionStorageServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SessionStorageService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SessionStorageServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SessionStorageServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SessionStorageServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// stores a sesion; if it exists it will be updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result SaveSession(global::Avikom.Types.Assistance.Session request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// stores a sesion; if it exists it will be updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result SaveSession(global::Avikom.Types.Assistance.Session request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SaveSession, null, options, request);
      }
      /// <summary>
      //// stores a sesion; if it exists it will be updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SaveSessionAsync(global::Avikom.Types.Assistance.Session request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SaveSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// stores a sesion; if it exists it will be updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SaveSessionAsync(global::Avikom.Types.Assistance.Session request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SaveSession, null, options, request);
      }
      /// <summary>
      //// retrieves a single session; `SessionQuery` must return a single session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.Session GetSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// retrieves a single session; `SessionQuery` must return a single session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.Session GetSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSession, null, options, request);
      }
      /// <summary>
      //// retrieves a single session; `SessionQuery` must return a single session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.Session> GetSessionAsync(global::Avikom.Types.Assistance.SessionQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// retrieves a single session; `SessionQuery` must return a single session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.Session> GetSessionAsync(global::Avikom.Types.Assistance.SessionQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSession, null, options, request);
      }
      /// <summary>
      //// returns all currently stored sessions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.SessionList GetAllSessions(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllSessions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns all currently stored sessions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.SessionList GetAllSessions(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllSessions, null, options, request);
      }
      /// <summary>
      //// returns all currently stored sessions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.SessionList> GetAllSessionsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllSessionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns all currently stored sessions
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.SessionList> GetAllSessionsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllSessions, null, options, request);
      }
      /// <summary>
      //// deletes (a) session(s); deletes all sessions that fulfill `SessionQuery`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result DeleteSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// deletes (a) session(s); deletes all sessions that fulfill `SessionQuery`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result DeleteSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSession, null, options, request);
      }
      /// <summary>
      //// deletes (a) session(s); deletes all sessions that fulfill `SessionQuery`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> DeleteSessionAsync(global::Avikom.Types.Assistance.SessionQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// deletes (a) session(s); deletes all sessions that fulfill `SessionQuery`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> DeleteSessionAsync(global::Avikom.Types.Assistance.SessionQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSession, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SessionStorageServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SessionStorageServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SessionStorageServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SaveSession, serviceImpl.SaveSession)
          .AddMethod(__Method_GetSession, serviceImpl.GetSession)
          .AddMethod(__Method_GetAllSessions, serviceImpl.GetAllSessions)
          .AddMethod(__Method_DeleteSession, serviceImpl.DeleteSession).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SessionStorageServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SaveSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.Session, global::Avikom.Types.Generic.Result>(serviceImpl.SaveSession));
      serviceBinder.AddMethod(__Method_GetSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Assistance.Session>(serviceImpl.GetSession));
      serviceBinder.AddMethod(__Method_GetAllSessions, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Assistance.SessionList>(serviceImpl.GetAllSessions));
      serviceBinder.AddMethod(__Method_DeleteSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Generic.Result>(serviceImpl.DeleteSession));
    }

  }
}
#endregion
