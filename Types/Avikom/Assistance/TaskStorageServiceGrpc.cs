// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/assistance/task_storage_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Avikom.Types.Assistance {
  /// <summary>
  ///*
  /// This services stores scene, task and task step definitions.
  /// It should not actively alter any of the provided data though.
  /// @author: Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public static partial class TaskStorageService
  {
    static readonly string __ServiceName = "avikom.assistance.TaskStorageService";

    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.Scene> __Marshaller_avikom_assistance_Scene = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.Scene.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Generic.Result> __Marshaller_avikom_generic_Result = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Generic.Result.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.TaskStorageQuery> __Marshaller_avikom_assistance_TaskStorageQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.TaskStorageQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.SceneList> __Marshaller_avikom_assistance_SceneList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.SceneList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.Task> __Marshaller_avikom_assistance_Task = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.Task.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.TaskList> __Marshaller_avikom_assistance_TaskList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.TaskList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.TaskStep> __Marshaller_avikom_assistance_TaskStep = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.TaskStep.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.TaskStepList> __Marshaller_avikom_assistance_TaskStepList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.TaskStepList.Parser.ParseFrom);

    static readonly grpc::Method<global::Avikom.Types.Assistance.Scene, global::Avikom.Types.Generic.Result> __Method_AddScene = new grpc::Method<global::Avikom.Types.Assistance.Scene, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddScene",
        __Marshaller_avikom_assistance_Scene,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.Scene, global::Avikom.Types.Generic.Result> __Method_UpdateScene = new grpc::Method<global::Avikom.Types.Assistance.Scene, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateScene",
        __Marshaller_avikom_assistance_Scene,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.TaskStorageQuery, global::Avikom.Types.Assistance.Scene> __Method_GetScene = new grpc::Method<global::Avikom.Types.Assistance.TaskStorageQuery, global::Avikom.Types.Assistance.Scene>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetScene",
        __Marshaller_avikom_assistance_TaskStorageQuery,
        __Marshaller_avikom_assistance_Scene);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Assistance.SceneList> __Method_GetAllScenes = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Assistance.SceneList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllScenes",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_avikom_assistance_SceneList);

    static readonly grpc::Method<global::Avikom.Types.Assistance.Task, global::Avikom.Types.Generic.Result> __Method_AddTask = new grpc::Method<global::Avikom.Types.Assistance.Task, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddTask",
        __Marshaller_avikom_assistance_Task,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.Task, global::Avikom.Types.Generic.Result> __Method_UpdateTask = new grpc::Method<global::Avikom.Types.Assistance.Task, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTask",
        __Marshaller_avikom_assistance_Task,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.TaskStorageQuery, global::Avikom.Types.Assistance.Task> __Method_GetTask = new grpc::Method<global::Avikom.Types.Assistance.TaskStorageQuery, global::Avikom.Types.Assistance.Task>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTask",
        __Marshaller_avikom_assistance_TaskStorageQuery,
        __Marshaller_avikom_assistance_Task);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Assistance.TaskList> __Method_GetAllTasks = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Assistance.TaskList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllTasks",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_avikom_assistance_TaskList);

    static readonly grpc::Method<global::Avikom.Types.Assistance.TaskStep, global::Avikom.Types.Generic.Result> __Method_AddTaskStep = new grpc::Method<global::Avikom.Types.Assistance.TaskStep, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddTaskStep",
        __Marshaller_avikom_assistance_TaskStep,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.TaskStep, global::Avikom.Types.Generic.Result> __Method_UpdateTaskStep = new grpc::Method<global::Avikom.Types.Assistance.TaskStep, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTaskStep",
        __Marshaller_avikom_assistance_TaskStep,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.TaskStorageQuery, global::Avikom.Types.Assistance.TaskStep> __Method_GetTaskStep = new grpc::Method<global::Avikom.Types.Assistance.TaskStorageQuery, global::Avikom.Types.Assistance.TaskStep>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTaskStep",
        __Marshaller_avikom_assistance_TaskStorageQuery,
        __Marshaller_avikom_assistance_TaskStep);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Assistance.TaskStepList> __Method_GetAllTaskSteps = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Assistance.TaskStepList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAllTaskSteps",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_avikom_assistance_TaskStepList);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Avikom.Types.Assistance.TaskStorageServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of TaskStorageService</summary>
    [grpc::BindServiceMethod(typeof(TaskStorageService), "BindService")]
    public abstract partial class TaskStorageServiceBase
    {
      /// <summary>
      //// adds a scene to the storage; raises an error if the scene already exists
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> AddScene(global::Avikom.Types.Assistance.Scene request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// updates an existing scene; will raise an error when the scene does not exist
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> UpdateScene(global::Avikom.Types.Assistance.Scene request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// returns a scene with name equals to `name`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Assistance.Scene> GetScene(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// returns a list of all currently available scenes; fields such as task will be completely resolved
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Assistance.SceneList> GetAllScenes(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// adds a task to the storage; raises an error if the task already exists
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> AddTask(global::Avikom.Types.Assistance.Task request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// updates an existing task; will raise an error when the task does not exist
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> UpdateTask(global::Avikom.Types.Assistance.Task request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// returns a task with name equals to `name`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Assistance.Task> GetTask(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// returns a list of all currently available tasks; fields such as steps will be completely resolved
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Assistance.TaskList> GetAllTasks(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// adds a task step to the storage; raises an error if the step already exists
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> AddTaskStep(global::Avikom.Types.Assistance.TaskStep request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// updates an existing task step; will raise an error when the step does not exist
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> UpdateTaskStep(global::Avikom.Types.Assistance.TaskStep request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// returns a task step with name equals to `name`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Assistance.TaskStep> GetTaskStep(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// returns a list of task steps
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Assistance.TaskStepList> GetAllTaskSteps(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TaskStorageService</summary>
    public partial class TaskStorageServiceClient : grpc::ClientBase<TaskStorageServiceClient>
    {
      /// <summary>Creates a new client for TaskStorageService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TaskStorageServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TaskStorageService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TaskStorageServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TaskStorageServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TaskStorageServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// adds a scene to the storage; raises an error if the scene already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result AddScene(global::Avikom.Types.Assistance.Scene request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddScene(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// adds a scene to the storage; raises an error if the scene already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result AddScene(global::Avikom.Types.Assistance.Scene request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddScene, null, options, request);
      }
      /// <summary>
      //// adds a scene to the storage; raises an error if the scene already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> AddSceneAsync(global::Avikom.Types.Assistance.Scene request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSceneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// adds a scene to the storage; raises an error if the scene already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> AddSceneAsync(global::Avikom.Types.Assistance.Scene request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddScene, null, options, request);
      }
      /// <summary>
      //// updates an existing scene; will raise an error when the scene does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result UpdateScene(global::Avikom.Types.Assistance.Scene request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateScene(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates an existing scene; will raise an error when the scene does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result UpdateScene(global::Avikom.Types.Assistance.Scene request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateScene, null, options, request);
      }
      /// <summary>
      //// updates an existing scene; will raise an error when the scene does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> UpdateSceneAsync(global::Avikom.Types.Assistance.Scene request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSceneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates an existing scene; will raise an error when the scene does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> UpdateSceneAsync(global::Avikom.Types.Assistance.Scene request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateScene, null, options, request);
      }
      /// <summary>
      //// returns a scene with name equals to `name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.Scene GetScene(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetScene(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a scene with name equals to `name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.Scene GetScene(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetScene, null, options, request);
      }
      /// <summary>
      //// returns a scene with name equals to `name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.Scene> GetSceneAsync(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSceneAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a scene with name equals to `name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.Scene> GetSceneAsync(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetScene, null, options, request);
      }
      /// <summary>
      //// returns a list of all currently available scenes; fields such as task will be completely resolved
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.SceneList GetAllScenes(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllScenes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a list of all currently available scenes; fields such as task will be completely resolved
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.SceneList GetAllScenes(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllScenes, null, options, request);
      }
      /// <summary>
      //// returns a list of all currently available scenes; fields such as task will be completely resolved
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.SceneList> GetAllScenesAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllScenesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a list of all currently available scenes; fields such as task will be completely resolved
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.SceneList> GetAllScenesAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllScenes, null, options, request);
      }
      /// <summary>
      //// adds a task to the storage; raises an error if the task already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result AddTask(global::Avikom.Types.Assistance.Task request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// adds a task to the storage; raises an error if the task already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result AddTask(global::Avikom.Types.Assistance.Task request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddTask, null, options, request);
      }
      /// <summary>
      //// adds a task to the storage; raises an error if the task already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> AddTaskAsync(global::Avikom.Types.Assistance.Task request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// adds a task to the storage; raises an error if the task already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> AddTaskAsync(global::Avikom.Types.Assistance.Task request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddTask, null, options, request);
      }
      /// <summary>
      //// updates an existing task; will raise an error when the task does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result UpdateTask(global::Avikom.Types.Assistance.Task request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates an existing task; will raise an error when the task does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result UpdateTask(global::Avikom.Types.Assistance.Task request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTask, null, options, request);
      }
      /// <summary>
      //// updates an existing task; will raise an error when the task does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> UpdateTaskAsync(global::Avikom.Types.Assistance.Task request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates an existing task; will raise an error when the task does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> UpdateTaskAsync(global::Avikom.Types.Assistance.Task request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTask, null, options, request);
      }
      /// <summary>
      //// returns a task with name equals to `name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.Task GetTask(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTask(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a task with name equals to `name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.Task GetTask(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTask, null, options, request);
      }
      /// <summary>
      //// returns a task with name equals to `name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.Task> GetTaskAsync(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a task with name equals to `name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.Task> GetTaskAsync(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTask, null, options, request);
      }
      /// <summary>
      //// returns a list of all currently available tasks; fields such as steps will be completely resolved
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.TaskList GetAllTasks(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllTasks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a list of all currently available tasks; fields such as steps will be completely resolved
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.TaskList GetAllTasks(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllTasks, null, options, request);
      }
      /// <summary>
      //// returns a list of all currently available tasks; fields such as steps will be completely resolved
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.TaskList> GetAllTasksAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllTasksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a list of all currently available tasks; fields such as steps will be completely resolved
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.TaskList> GetAllTasksAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllTasks, null, options, request);
      }
      /// <summary>
      //// adds a task step to the storage; raises an error if the step already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result AddTaskStep(global::Avikom.Types.Assistance.TaskStep request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddTaskStep(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// adds a task step to the storage; raises an error if the step already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result AddTaskStep(global::Avikom.Types.Assistance.TaskStep request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddTaskStep, null, options, request);
      }
      /// <summary>
      //// adds a task step to the storage; raises an error if the step already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> AddTaskStepAsync(global::Avikom.Types.Assistance.TaskStep request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddTaskStepAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// adds a task step to the storage; raises an error if the step already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> AddTaskStepAsync(global::Avikom.Types.Assistance.TaskStep request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddTaskStep, null, options, request);
      }
      /// <summary>
      //// updates an existing task step; will raise an error when the step does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result UpdateTaskStep(global::Avikom.Types.Assistance.TaskStep request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTaskStep(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates an existing task step; will raise an error when the step does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result UpdateTaskStep(global::Avikom.Types.Assistance.TaskStep request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTaskStep, null, options, request);
      }
      /// <summary>
      //// updates an existing task step; will raise an error when the step does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> UpdateTaskStepAsync(global::Avikom.Types.Assistance.TaskStep request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTaskStepAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates an existing task step; will raise an error when the step does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> UpdateTaskStepAsync(global::Avikom.Types.Assistance.TaskStep request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTaskStep, null, options, request);
      }
      /// <summary>
      //// returns a task step with name equals to `name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.TaskStep GetTaskStep(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskStep(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a task step with name equals to `name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.TaskStep GetTaskStep(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTaskStep, null, options, request);
      }
      /// <summary>
      //// returns a task step with name equals to `name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.TaskStep> GetTaskStepAsync(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskStepAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a task step with name equals to `name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.TaskStep> GetTaskStepAsync(global::Avikom.Types.Assistance.TaskStorageQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTaskStep, null, options, request);
      }
      /// <summary>
      //// returns a list of task steps
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.TaskStepList GetAllTaskSteps(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllTaskSteps(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a list of task steps
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.TaskStepList GetAllTaskSteps(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAllTaskSteps, null, options, request);
      }
      /// <summary>
      //// returns a list of task steps
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.TaskStepList> GetAllTaskStepsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAllTaskStepsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a list of task steps
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.TaskStepList> GetAllTaskStepsAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAllTaskSteps, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TaskStorageServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TaskStorageServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TaskStorageServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddScene, serviceImpl.AddScene)
          .AddMethod(__Method_UpdateScene, serviceImpl.UpdateScene)
          .AddMethod(__Method_GetScene, serviceImpl.GetScene)
          .AddMethod(__Method_GetAllScenes, serviceImpl.GetAllScenes)
          .AddMethod(__Method_AddTask, serviceImpl.AddTask)
          .AddMethod(__Method_UpdateTask, serviceImpl.UpdateTask)
          .AddMethod(__Method_GetTask, serviceImpl.GetTask)
          .AddMethod(__Method_GetAllTasks, serviceImpl.GetAllTasks)
          .AddMethod(__Method_AddTaskStep, serviceImpl.AddTaskStep)
          .AddMethod(__Method_UpdateTaskStep, serviceImpl.UpdateTaskStep)
          .AddMethod(__Method_GetTaskStep, serviceImpl.GetTaskStep)
          .AddMethod(__Method_GetAllTaskSteps, serviceImpl.GetAllTaskSteps).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TaskStorageServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddScene, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.Scene, global::Avikom.Types.Generic.Result>(serviceImpl.AddScene));
      serviceBinder.AddMethod(__Method_UpdateScene, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.Scene, global::Avikom.Types.Generic.Result>(serviceImpl.UpdateScene));
      serviceBinder.AddMethod(__Method_GetScene, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.TaskStorageQuery, global::Avikom.Types.Assistance.Scene>(serviceImpl.GetScene));
      serviceBinder.AddMethod(__Method_GetAllScenes, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Assistance.SceneList>(serviceImpl.GetAllScenes));
      serviceBinder.AddMethod(__Method_AddTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.Task, global::Avikom.Types.Generic.Result>(serviceImpl.AddTask));
      serviceBinder.AddMethod(__Method_UpdateTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.Task, global::Avikom.Types.Generic.Result>(serviceImpl.UpdateTask));
      serviceBinder.AddMethod(__Method_GetTask, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.TaskStorageQuery, global::Avikom.Types.Assistance.Task>(serviceImpl.GetTask));
      serviceBinder.AddMethod(__Method_GetAllTasks, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Assistance.TaskList>(serviceImpl.GetAllTasks));
      serviceBinder.AddMethod(__Method_AddTaskStep, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.TaskStep, global::Avikom.Types.Generic.Result>(serviceImpl.AddTaskStep));
      serviceBinder.AddMethod(__Method_UpdateTaskStep, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.TaskStep, global::Avikom.Types.Generic.Result>(serviceImpl.UpdateTaskStep));
      serviceBinder.AddMethod(__Method_GetTaskStep, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.TaskStorageQuery, global::Avikom.Types.Assistance.TaskStep>(serviceImpl.GetTaskStep));
      serviceBinder.AddMethod(__Method_GetAllTaskSteps, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Assistance.TaskStepList>(serviceImpl.GetAllTaskSteps));
    }

  }
}
#endregion
