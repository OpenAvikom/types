// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/assistance/session_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Avikom.Types.Assistance {
  /// <summary>
  ///
  /// This service initializes sessions and starts the related Camunda processes.
  /// It also processes TaskStep completion and failure events and forwards these information to Camunda.
  /// Furthermore it processes environmental factors that may influence a session and can be used to request currently eligible `RuntimeTaskSteps`.
  /// @author Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public static partial class SessionService
  {
    static readonly string __ServiceName = "avikom.assistance.SessionService";

    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.SessionEvent> __Marshaller_avikom_assistance_SessionEvent = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.SessionEvent.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Generic.Result> __Marshaller_avikom_generic_Result = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Generic.Result.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.TaskEvent> __Marshaller_avikom_assistance_TaskEvent = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.TaskEvent.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.SessionQuery> __Marshaller_avikom_assistance_SessionQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.SessionQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.RuntimeStepList> __Marshaller_avikom_assistance_RuntimeStepList = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.RuntimeStepList.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.EnvironmentalFactorsUpdate> __Marshaller_avikom_assistance_EnvironmentalFactorsUpdate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.EnvironmentalFactorsUpdate.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Generic.Peer> __Marshaller_avikom_generic_Peer = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Generic.Peer.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);

    static readonly grpc::Method<global::Avikom.Types.Assistance.SessionEvent, global::Avikom.Types.Generic.Result> __Method_EmitEvent = new grpc::Method<global::Avikom.Types.Assistance.SessionEvent, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EmitEvent",
        __Marshaller_avikom_assistance_SessionEvent,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.TaskEvent, global::Avikom.Types.Generic.Result> __Method_CompleteTaskStep = new grpc::Method<global::Avikom.Types.Assistance.TaskEvent, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CompleteTaskStep",
        __Marshaller_avikom_assistance_TaskEvent,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.TaskEvent, global::Avikom.Types.Generic.Result> __Method_FailTaskStep = new grpc::Method<global::Avikom.Types.Assistance.TaskEvent, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FailTaskStep",
        __Marshaller_avikom_assistance_TaskEvent,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Assistance.RuntimeStepList> __Method_GetCurrentStep = new grpc::Method<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Assistance.RuntimeStepList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetCurrentStep",
        __Marshaller_avikom_assistance_SessionQuery,
        __Marshaller_avikom_assistance_RuntimeStepList);

    static readonly grpc::Method<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Generic.Result> __Method_StartSession = new grpc::Method<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartSession",
        __Marshaller_avikom_assistance_SessionQuery,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Generic.Result> __Method_SuspendSession = new grpc::Method<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SuspendSession",
        __Marshaller_avikom_assistance_SessionQuery,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Generic.Result> __Method_EndSession = new grpc::Method<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EndSession",
        __Marshaller_avikom_assistance_SessionQuery,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.EnvironmentalFactorsUpdate, global::Avikom.Types.Generic.Result> __Method_UpdateEnvironmentalFactors = new grpc::Method<global::Avikom.Types.Assistance.EnvironmentalFactorsUpdate, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateEnvironmentalFactors",
        __Marshaller_avikom_assistance_EnvironmentalFactorsUpdate,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Generic.Peer, global::Avikom.Types.Assistance.RuntimeStepList> __Method_RegisterUserPeer = new grpc::Method<global::Avikom.Types.Generic.Peer, global::Avikom.Types.Assistance.RuntimeStepList>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterUserPeer",
        __Marshaller_avikom_generic_Peer,
        __Marshaller_avikom_assistance_RuntimeStepList);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Generic.Result> __Method_EndAllProcesses = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EndAllProcesses",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_avikom_generic_Result);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Avikom.Types.Assistance.SessionServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SessionService</summary>
    [grpc::BindServiceMethod(typeof(SessionService), "BindService")]
    public abstract partial class SessionServiceBase
    {
      /// <summary>
      //// pushes an event to Camunda for processing
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> EmitEvent(global::Avikom.Types.Assistance.SessionEvent request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// completes an event; `task_id` is required; `result` will be forwarded to the related service worker if provided.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> CompleteTaskStep(global::Avikom.Types.Assistance.TaskEvent request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// fails an event; `task_id` is required; This will most likely lead to Camunda advertising the related `TaskStep` again or process failure if the maximum amount of retries has been reached.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> FailTaskStep(global::Avikom.Types.Assistance.TaskEvent request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// returns the currently eligible `RunTimeTaskSteps` assigned to a session
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Assistance.RuntimeStepList> GetCurrentStep(global::Avikom.Types.Assistance.SessionQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// starts a session; a mean to identify the user (e.g. `user_id` or `username`) must be provided
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> StartSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// suspends a session; it can be continued later on; can be queried with `session_id` or means to identify the user
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> SuspendSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// removes the session from the system; can be queried with `session_id` or means to identify the user
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> EndSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// updates `brightness` and/or `volume` (loudness) of a session; with only a scene name passed, all related sessions should be updated
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> UpdateEnvironmentalFactors(global::Avikom.Types.Assistance.EnvironmentalFactorsUpdate request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// Registers or updates a peer of a user for a running session. The new peer receives the currently processed and orchestrated RuntimeStepList.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Assistance.RuntimeStepList> RegisterUserPeer(global::Avikom.Types.Generic.Peer request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// Ends all sessions and all Camunda processes
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> EndAllProcesses(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SessionService</summary>
    public partial class SessionServiceClient : grpc::ClientBase<SessionServiceClient>
    {
      /// <summary>Creates a new client for SessionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SessionServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SessionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SessionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SessionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SessionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// pushes an event to Camunda for processing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result EmitEvent(global::Avikom.Types.Assistance.SessionEvent request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EmitEvent(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// pushes an event to Camunda for processing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result EmitEvent(global::Avikom.Types.Assistance.SessionEvent request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EmitEvent, null, options, request);
      }
      /// <summary>
      //// pushes an event to Camunda for processing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> EmitEventAsync(global::Avikom.Types.Assistance.SessionEvent request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EmitEventAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// pushes an event to Camunda for processing
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> EmitEventAsync(global::Avikom.Types.Assistance.SessionEvent request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EmitEvent, null, options, request);
      }
      /// <summary>
      //// completes an event; `task_id` is required; `result` will be forwarded to the related service worker if provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result CompleteTaskStep(global::Avikom.Types.Assistance.TaskEvent request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CompleteTaskStep(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// completes an event; `task_id` is required; `result` will be forwarded to the related service worker if provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result CompleteTaskStep(global::Avikom.Types.Assistance.TaskEvent request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CompleteTaskStep, null, options, request);
      }
      /// <summary>
      //// completes an event; `task_id` is required; `result` will be forwarded to the related service worker if provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> CompleteTaskStepAsync(global::Avikom.Types.Assistance.TaskEvent request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CompleteTaskStepAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// completes an event; `task_id` is required; `result` will be forwarded to the related service worker if provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> CompleteTaskStepAsync(global::Avikom.Types.Assistance.TaskEvent request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CompleteTaskStep, null, options, request);
      }
      /// <summary>
      //// fails an event; `task_id` is required; This will most likely lead to Camunda advertising the related `TaskStep` again or process failure if the maximum amount of retries has been reached.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result FailTaskStep(global::Avikom.Types.Assistance.TaskEvent request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FailTaskStep(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// fails an event; `task_id` is required; This will most likely lead to Camunda advertising the related `TaskStep` again or process failure if the maximum amount of retries has been reached.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result FailTaskStep(global::Avikom.Types.Assistance.TaskEvent request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FailTaskStep, null, options, request);
      }
      /// <summary>
      //// fails an event; `task_id` is required; This will most likely lead to Camunda advertising the related `TaskStep` again or process failure if the maximum amount of retries has been reached.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> FailTaskStepAsync(global::Avikom.Types.Assistance.TaskEvent request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FailTaskStepAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// fails an event; `task_id` is required; This will most likely lead to Camunda advertising the related `TaskStep` again or process failure if the maximum amount of retries has been reached.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> FailTaskStepAsync(global::Avikom.Types.Assistance.TaskEvent request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FailTaskStep, null, options, request);
      }
      /// <summary>
      //// returns the currently eligible `RunTimeTaskSteps` assigned to a session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.RuntimeStepList GetCurrentStep(global::Avikom.Types.Assistance.SessionQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCurrentStep(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns the currently eligible `RunTimeTaskSteps` assigned to a session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.RuntimeStepList GetCurrentStep(global::Avikom.Types.Assistance.SessionQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetCurrentStep, null, options, request);
      }
      /// <summary>
      //// returns the currently eligible `RunTimeTaskSteps` assigned to a session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.RuntimeStepList> GetCurrentStepAsync(global::Avikom.Types.Assistance.SessionQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetCurrentStepAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns the currently eligible `RunTimeTaskSteps` assigned to a session
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.RuntimeStepList> GetCurrentStepAsync(global::Avikom.Types.Assistance.SessionQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetCurrentStep, null, options, request);
      }
      /// <summary>
      //// starts a session; a mean to identify the user (e.g. `user_id` or `username`) must be provided
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result StartSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// starts a session; a mean to identify the user (e.g. `user_id` or `username`) must be provided
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result StartSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartSession, null, options, request);
      }
      /// <summary>
      //// starts a session; a mean to identify the user (e.g. `user_id` or `username`) must be provided
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> StartSessionAsync(global::Avikom.Types.Assistance.SessionQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// starts a session; a mean to identify the user (e.g. `user_id` or `username`) must be provided
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> StartSessionAsync(global::Avikom.Types.Assistance.SessionQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartSession, null, options, request);
      }
      /// <summary>
      //// suspends a session; it can be continued later on; can be queried with `session_id` or means to identify the user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result SuspendSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SuspendSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// suspends a session; it can be continued later on; can be queried with `session_id` or means to identify the user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result SuspendSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SuspendSession, null, options, request);
      }
      /// <summary>
      //// suspends a session; it can be continued later on; can be queried with `session_id` or means to identify the user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SuspendSessionAsync(global::Avikom.Types.Assistance.SessionQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SuspendSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// suspends a session; it can be continued later on; can be queried with `session_id` or means to identify the user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SuspendSessionAsync(global::Avikom.Types.Assistance.SessionQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SuspendSession, null, options, request);
      }
      /// <summary>
      //// removes the session from the system; can be queried with `session_id` or means to identify the user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result EndSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EndSession(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// removes the session from the system; can be queried with `session_id` or means to identify the user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result EndSession(global::Avikom.Types.Assistance.SessionQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EndSession, null, options, request);
      }
      /// <summary>
      //// removes the session from the system; can be queried with `session_id` or means to identify the user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> EndSessionAsync(global::Avikom.Types.Assistance.SessionQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EndSessionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// removes the session from the system; can be queried with `session_id` or means to identify the user
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> EndSessionAsync(global::Avikom.Types.Assistance.SessionQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EndSession, null, options, request);
      }
      /// <summary>
      //// updates `brightness` and/or `volume` (loudness) of a session; with only a scene name passed, all related sessions should be updated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result UpdateEnvironmentalFactors(global::Avikom.Types.Assistance.EnvironmentalFactorsUpdate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEnvironmentalFactors(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates `brightness` and/or `volume` (loudness) of a session; with only a scene name passed, all related sessions should be updated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result UpdateEnvironmentalFactors(global::Avikom.Types.Assistance.EnvironmentalFactorsUpdate request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateEnvironmentalFactors, null, options, request);
      }
      /// <summary>
      //// updates `brightness` and/or `volume` (loudness) of a session; with only a scene name passed, all related sessions should be updated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> UpdateEnvironmentalFactorsAsync(global::Avikom.Types.Assistance.EnvironmentalFactorsUpdate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateEnvironmentalFactorsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates `brightness` and/or `volume` (loudness) of a session; with only a scene name passed, all related sessions should be updated
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> UpdateEnvironmentalFactorsAsync(global::Avikom.Types.Assistance.EnvironmentalFactorsUpdate request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateEnvironmentalFactors, null, options, request);
      }
      /// <summary>
      //// Registers or updates a peer of a user for a running session. The new peer receives the currently processed and orchestrated RuntimeStepList.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.RuntimeStepList RegisterUserPeer(global::Avikom.Types.Generic.Peer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterUserPeer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// Registers or updates a peer of a user for a running session. The new peer receives the currently processed and orchestrated RuntimeStepList.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.RuntimeStepList RegisterUserPeer(global::Avikom.Types.Generic.Peer request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterUserPeer, null, options, request);
      }
      /// <summary>
      //// Registers or updates a peer of a user for a running session. The new peer receives the currently processed and orchestrated RuntimeStepList.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.RuntimeStepList> RegisterUserPeerAsync(global::Avikom.Types.Generic.Peer request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterUserPeerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// Registers or updates a peer of a user for a running session. The new peer receives the currently processed and orchestrated RuntimeStepList.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.RuntimeStepList> RegisterUserPeerAsync(global::Avikom.Types.Generic.Peer request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterUserPeer, null, options, request);
      }
      /// <summary>
      //// Ends all sessions and all Camunda processes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result EndAllProcesses(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EndAllProcesses(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// Ends all sessions and all Camunda processes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result EndAllProcesses(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EndAllProcesses, null, options, request);
      }
      /// <summary>
      //// Ends all sessions and all Camunda processes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> EndAllProcessesAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return EndAllProcessesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// Ends all sessions and all Camunda processes
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> EndAllProcessesAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EndAllProcesses, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SessionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SessionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SessionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_EmitEvent, serviceImpl.EmitEvent)
          .AddMethod(__Method_CompleteTaskStep, serviceImpl.CompleteTaskStep)
          .AddMethod(__Method_FailTaskStep, serviceImpl.FailTaskStep)
          .AddMethod(__Method_GetCurrentStep, serviceImpl.GetCurrentStep)
          .AddMethod(__Method_StartSession, serviceImpl.StartSession)
          .AddMethod(__Method_SuspendSession, serviceImpl.SuspendSession)
          .AddMethod(__Method_EndSession, serviceImpl.EndSession)
          .AddMethod(__Method_UpdateEnvironmentalFactors, serviceImpl.UpdateEnvironmentalFactors)
          .AddMethod(__Method_RegisterUserPeer, serviceImpl.RegisterUserPeer)
          .AddMethod(__Method_EndAllProcesses, serviceImpl.EndAllProcesses).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SessionServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_EmitEvent, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.SessionEvent, global::Avikom.Types.Generic.Result>(serviceImpl.EmitEvent));
      serviceBinder.AddMethod(__Method_CompleteTaskStep, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.TaskEvent, global::Avikom.Types.Generic.Result>(serviceImpl.CompleteTaskStep));
      serviceBinder.AddMethod(__Method_FailTaskStep, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.TaskEvent, global::Avikom.Types.Generic.Result>(serviceImpl.FailTaskStep));
      serviceBinder.AddMethod(__Method_GetCurrentStep, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Assistance.RuntimeStepList>(serviceImpl.GetCurrentStep));
      serviceBinder.AddMethod(__Method_StartSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Generic.Result>(serviceImpl.StartSession));
      serviceBinder.AddMethod(__Method_SuspendSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Generic.Result>(serviceImpl.SuspendSession));
      serviceBinder.AddMethod(__Method_EndSession, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.SessionQuery, global::Avikom.Types.Generic.Result>(serviceImpl.EndSession));
      serviceBinder.AddMethod(__Method_UpdateEnvironmentalFactors, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.EnvironmentalFactorsUpdate, global::Avikom.Types.Generic.Result>(serviceImpl.UpdateEnvironmentalFactors));
      serviceBinder.AddMethod(__Method_RegisterUserPeer, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Generic.Peer, global::Avikom.Types.Assistance.RuntimeStepList>(serviceImpl.RegisterUserPeer));
      serviceBinder.AddMethod(__Method_EndAllProcesses, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Generic.Result>(serviceImpl.EndAllProcesses));
    }

  }
}
#endregion
