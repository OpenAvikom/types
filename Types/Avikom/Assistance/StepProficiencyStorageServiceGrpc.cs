// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/assistance/step_proficiency_storage_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Avikom.Types.Assistance {
  /// <summary>
  ///
  /// Stores the required step proficiencies for users and their split procedure results.
  /// If no record exists for user_id, Get/SetStepProficiency should generate and/or work with
  /// default data and information retrieved from task step stereotypes. Thus there should always be
  /// a valid return value and/or generated entry to work with. Furthermore,
  /// assistance_decay should be 'fuzzy' to follow ideas presented in https://www.mdpi.com/2078-2489/12/1/17. 
  /// @author Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public static partial class StepProficiencyStorageService
  {
    static readonly string __ServiceName = "avikom.assistance.StepProficiencyStorageService";

    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.StepProficiencyQuery> __Marshaller_avikom_assistance_StepProficiencyQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.StepProficiencyQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.StepProficiency> __Marshaller_avikom_assistance_StepProficiency = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.StepProficiency.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Generic.Result> __Marshaller_avikom_generic_Result = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Generic.Result.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.SplitProcedureResult> __Marshaller_avikom_assistance_SplitProcedureResult = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.SplitProcedureResult.Parser.ParseFrom);

    static readonly grpc::Method<global::Avikom.Types.Assistance.StepProficiencyQuery, global::Avikom.Types.Assistance.StepProficiency> __Method_GetStepProficiency = new grpc::Method<global::Avikom.Types.Assistance.StepProficiencyQuery, global::Avikom.Types.Assistance.StepProficiency>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStepProficiency",
        __Marshaller_avikom_assistance_StepProficiencyQuery,
        __Marshaller_avikom_assistance_StepProficiency);

    static readonly grpc::Method<global::Avikom.Types.Assistance.StepProficiency, global::Avikom.Types.Generic.Result> __Method_SetStepProficiency = new grpc::Method<global::Avikom.Types.Assistance.StepProficiency, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetStepProficiency",
        __Marshaller_avikom_assistance_StepProficiency,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.StepProficiencyQuery, global::Avikom.Types.Assistance.SplitProcedureResult> __Method_GetSplitProcedureResult = new grpc::Method<global::Avikom.Types.Assistance.StepProficiencyQuery, global::Avikom.Types.Assistance.SplitProcedureResult>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSplitProcedureResult",
        __Marshaller_avikom_assistance_StepProficiencyQuery,
        __Marshaller_avikom_assistance_SplitProcedureResult);

    static readonly grpc::Method<global::Avikom.Types.Assistance.SplitProcedureResult, global::Avikom.Types.Generic.Result> __Method_SetSplitProcedureResult = new grpc::Method<global::Avikom.Types.Assistance.SplitProcedureResult, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetSplitProcedureResult",
        __Marshaller_avikom_assistance_SplitProcedureResult,
        __Marshaller_avikom_generic_Result);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Avikom.Types.Assistance.StepProficiencyStorageServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of StepProficiencyStorageService</summary>
    [grpc::BindServiceMethod(typeof(StepProficiencyStorageService), "BindService")]
    public abstract partial class StepProficiencyStorageServiceBase
    {
      /// <summary>
      //// returns step proficiency for a user with `user_id` and the task step named `target_name` 
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Assistance.StepProficiency> GetStepProficiency(global::Avikom.Types.Assistance.StepProficiencyQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// updates or creates the step proficiency for a user with `user_id` for the task step named `target_name`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> SetStepProficiency(global::Avikom.Types.Assistance.StepProficiency request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// returns the split procedure results for a user with `user_id` for the task named `target_name`  
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Assistance.SplitProcedureResult> GetSplitProcedureResult(global::Avikom.Types.Assistance.StepProficiencyQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// creates or updates split procedure results for a user with `user_id` for the task named `target_name`  
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> SetSplitProcedureResult(global::Avikom.Types.Assistance.SplitProcedureResult request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for StepProficiencyStorageService</summary>
    public partial class StepProficiencyStorageServiceClient : grpc::ClientBase<StepProficiencyStorageServiceClient>
    {
      /// <summary>Creates a new client for StepProficiencyStorageService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public StepProficiencyStorageServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for StepProficiencyStorageService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public StepProficiencyStorageServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected StepProficiencyStorageServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected StepProficiencyStorageServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// returns step proficiency for a user with `user_id` and the task step named `target_name` 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.StepProficiency GetStepProficiency(global::Avikom.Types.Assistance.StepProficiencyQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStepProficiency(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns step proficiency for a user with `user_id` and the task step named `target_name` 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.StepProficiency GetStepProficiency(global::Avikom.Types.Assistance.StepProficiencyQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStepProficiency, null, options, request);
      }
      /// <summary>
      //// returns step proficiency for a user with `user_id` and the task step named `target_name` 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.StepProficiency> GetStepProficiencyAsync(global::Avikom.Types.Assistance.StepProficiencyQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetStepProficiencyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns step proficiency for a user with `user_id` and the task step named `target_name` 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.StepProficiency> GetStepProficiencyAsync(global::Avikom.Types.Assistance.StepProficiencyQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStepProficiency, null, options, request);
      }
      /// <summary>
      //// updates or creates the step proficiency for a user with `user_id` for the task step named `target_name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result SetStepProficiency(global::Avikom.Types.Assistance.StepProficiency request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetStepProficiency(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates or creates the step proficiency for a user with `user_id` for the task step named `target_name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result SetStepProficiency(global::Avikom.Types.Assistance.StepProficiency request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetStepProficiency, null, options, request);
      }
      /// <summary>
      //// updates or creates the step proficiency for a user with `user_id` for the task step named `target_name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SetStepProficiencyAsync(global::Avikom.Types.Assistance.StepProficiency request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetStepProficiencyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates or creates the step proficiency for a user with `user_id` for the task step named `target_name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SetStepProficiencyAsync(global::Avikom.Types.Assistance.StepProficiency request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetStepProficiency, null, options, request);
      }
      /// <summary>
      //// returns the split procedure results for a user with `user_id` for the task named `target_name`  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.SplitProcedureResult GetSplitProcedureResult(global::Avikom.Types.Assistance.StepProficiencyQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSplitProcedureResult(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns the split procedure results for a user with `user_id` for the task named `target_name`  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Assistance.SplitProcedureResult GetSplitProcedureResult(global::Avikom.Types.Assistance.StepProficiencyQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSplitProcedureResult, null, options, request);
      }
      /// <summary>
      //// returns the split procedure results for a user with `user_id` for the task named `target_name`  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.SplitProcedureResult> GetSplitProcedureResultAsync(global::Avikom.Types.Assistance.StepProficiencyQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSplitProcedureResultAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns the split procedure results for a user with `user_id` for the task named `target_name`  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Assistance.SplitProcedureResult> GetSplitProcedureResultAsync(global::Avikom.Types.Assistance.StepProficiencyQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSplitProcedureResult, null, options, request);
      }
      /// <summary>
      //// creates or updates split procedure results for a user with `user_id` for the task named `target_name`  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result SetSplitProcedureResult(global::Avikom.Types.Assistance.SplitProcedureResult request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSplitProcedureResult(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// creates or updates split procedure results for a user with `user_id` for the task named `target_name`  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result SetSplitProcedureResult(global::Avikom.Types.Assistance.SplitProcedureResult request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetSplitProcedureResult, null, options, request);
      }
      /// <summary>
      //// creates or updates split procedure results for a user with `user_id` for the task named `target_name`  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SetSplitProcedureResultAsync(global::Avikom.Types.Assistance.SplitProcedureResult request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetSplitProcedureResultAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// creates or updates split procedure results for a user with `user_id` for the task named `target_name`  
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SetSplitProcedureResultAsync(global::Avikom.Types.Assistance.SplitProcedureResult request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetSplitProcedureResult, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override StepProficiencyStorageServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new StepProficiencyStorageServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(StepProficiencyStorageServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetStepProficiency, serviceImpl.GetStepProficiency)
          .AddMethod(__Method_SetStepProficiency, serviceImpl.SetStepProficiency)
          .AddMethod(__Method_GetSplitProcedureResult, serviceImpl.GetSplitProcedureResult)
          .AddMethod(__Method_SetSplitProcedureResult, serviceImpl.SetSplitProcedureResult).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, StepProficiencyStorageServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetStepProficiency, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.StepProficiencyQuery, global::Avikom.Types.Assistance.StepProficiency>(serviceImpl.GetStepProficiency));
      serviceBinder.AddMethod(__Method_SetStepProficiency, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.StepProficiency, global::Avikom.Types.Generic.Result>(serviceImpl.SetStepProficiency));
      serviceBinder.AddMethod(__Method_GetSplitProcedureResult, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.StepProficiencyQuery, global::Avikom.Types.Assistance.SplitProcedureResult>(serviceImpl.GetSplitProcedureResult));
      serviceBinder.AddMethod(__Method_SetSplitProcedureResult, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.SplitProcedureResult, global::Avikom.Types.Generic.Result>(serviceImpl.SetSplitProcedureResult));
    }

  }
}
#endregion
