// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/assistance/service_provider_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Avikom.Types.Assistance {
  /// <summary>
  ///*
  /// A service is a task step-agnostic solution provider.
  /// It must be specifically requested/configured in the apprpriate task step.
  /// @author Alexander McService Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public static partial class ServiceProviderService
  {
    static readonly string __ServiceName = "avikom.assistance.ServiceProviderService";

    static readonly grpc::Marshaller<global::Avikom.Types.Assistance.ServiceRequest> __Marshaller_avikom_assistance_ServiceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Assistance.ServiceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Generic.Result> __Marshaller_avikom_generic_Result = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Generic.Result.Parser.ParseFrom);

    static readonly grpc::Method<global::Avikom.Types.Assistance.ServiceRequest, global::Avikom.Types.Generic.Result> __Method_PostServiceRequest = new grpc::Method<global::Avikom.Types.Assistance.ServiceRequest, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PostServiceRequest",
        __Marshaller_avikom_assistance_ServiceRequest,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Assistance.ServiceRequest, global::Avikom.Types.Generic.Result> __Method_CancelServiceRequest = new grpc::Method<global::Avikom.Types.Assistance.ServiceRequest, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CancelServiceRequest",
        __Marshaller_avikom_assistance_ServiceRequest,
        __Marshaller_avikom_generic_Result);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Avikom.Types.Assistance.ServiceProviderServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ServiceProviderService</summary>
    [grpc::BindServiceMethod(typeof(ServiceProviderService), "BindService")]
    public abstract partial class ServiceProviderServiceBase
    {
      /// <summary>
      //// starts the service; a task_id must be passed for the service to resolve it
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> PostServiceRequest(global::Avikom.Types.Assistance.ServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// cancels a currently running task request; task_id must be provided
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> CancelServiceRequest(global::Avikom.Types.Assistance.ServiceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ServiceProviderService</summary>
    public partial class ServiceProviderServiceClient : grpc::ClientBase<ServiceProviderServiceClient>
    {
      /// <summary>Creates a new client for ServiceProviderService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ServiceProviderServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ServiceProviderService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ServiceProviderServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ServiceProviderServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ServiceProviderServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// starts the service; a task_id must be passed for the service to resolve it
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result PostServiceRequest(global::Avikom.Types.Assistance.ServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostServiceRequest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// starts the service; a task_id must be passed for the service to resolve it
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result PostServiceRequest(global::Avikom.Types.Assistance.ServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PostServiceRequest, null, options, request);
      }
      /// <summary>
      //// starts the service; a task_id must be passed for the service to resolve it
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> PostServiceRequestAsync(global::Avikom.Types.Assistance.ServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostServiceRequestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// starts the service; a task_id must be passed for the service to resolve it
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> PostServiceRequestAsync(global::Avikom.Types.Assistance.ServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PostServiceRequest, null, options, request);
      }
      /// <summary>
      //// cancels a currently running task request; task_id must be provided
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result CancelServiceRequest(global::Avikom.Types.Assistance.ServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelServiceRequest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// cancels a currently running task request; task_id must be provided
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result CancelServiceRequest(global::Avikom.Types.Assistance.ServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CancelServiceRequest, null, options, request);
      }
      /// <summary>
      //// cancels a currently running task request; task_id must be provided
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> CancelServiceRequestAsync(global::Avikom.Types.Assistance.ServiceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CancelServiceRequestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// cancels a currently running task request; task_id must be provided
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> CancelServiceRequestAsync(global::Avikom.Types.Assistance.ServiceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CancelServiceRequest, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ServiceProviderServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ServiceProviderServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ServiceProviderServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_PostServiceRequest, serviceImpl.PostServiceRequest)
          .AddMethod(__Method_CancelServiceRequest, serviceImpl.CancelServiceRequest).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ServiceProviderServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_PostServiceRequest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.ServiceRequest, global::Avikom.Types.Generic.Result>(serviceImpl.PostServiceRequest));
      serviceBinder.AddMethod(__Method_CancelServiceRequest, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Assistance.ServiceRequest, global::Avikom.Types.Generic.Result>(serviceImpl.CancelServiceRequest));
    }

  }
}
#endregion
