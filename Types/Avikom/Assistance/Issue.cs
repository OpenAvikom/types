// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/assistance/issue.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Avikom.Types.Assistance {

  /// <summary>Holder for reflection information generated from avikom/assistance/issue.proto</summary>
  public static partial class IssueReflection {

    #region Descriptor
    /// <summary>File descriptor for avikom/assistance/issue.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static IssueReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1hdmlrb20vYXNzaXN0YW5jZS9pc3N1ZS5wcm90bxIRYXZpa29tLmFzc2lz",
            "dGFuY2UaHWF2aWtvbS9hc3Npc3RhbmNlL3NjZW5lLnByb3RvGhxhdmlrb20v",
            "YXNzaXN0YW5jZS90YXNrLnByb3RvGhxhdmlrb20vb3B0aW9ucy9vcHRpb25z",
            "LnByb3RvGhlhdmlrb20vZ2VuZXJpYy91c2VyLnByb3RvGiNhdmlrb20vZ2Vu",
            "ZXJpYy9rZXlfdmFsdWVfcGFpci5wcm90byLcAgoFSXNzdWUSEgoCaWQYASAB",
            "KAlCBoq1GAIQARIkCgZpc3N1ZXIYAiABKAsyFC5hdmlrb20uZ2VuZXJpYy5V",
            "c2VyEhMKC2Rlc2NyaXB0aW9uGAMgASgJEicKBXNjZW5lGAQgASgLMhguYXZp",
            "a29tLmFzc2lzdGFuY2UuU2NlbmUSJQoEdGFzaxgFIAEoCzIXLmF2aWtvbS5h",
            "c3Npc3RhbmNlLlRhc2sSJQoHaW5jbHVkZRgGIAMoCzIULmF2aWtvbS5nZW5l",
            "cmljLlVzZXISJQoHZXhjbHVkZRgHIAMoCzIULmF2aWtvbS5nZW5lcmljLlVz",
            "ZXISMAoKcGFyYW1ldGVycxgIIAMoCzIcLmF2aWtvbS5nZW5lcmljLktleVZh",
            "bHVlUGFpchIuCgZzdGF0dXMYCSABKA4yHi5hdmlrb20uYXNzaXN0YW5jZS5J",
            "c3N1ZVN0YXR1czoEiLUYASI1CglJc3N1ZUxpc3QSKAoGaXNzdWVzGAEgAygL",
            "MhguYXZpa29tLmFzc2lzdGFuY2UuSXNzdWUqfAoLSXNzdWVTdGF0dXMSEQoN",
            "SVNTVUVfVU5LTk9XThAAEg4KCklTU1VFX09QRU4QARISCg5JU1NVRV9BU1NJ",
            "R05FRBAFEhAKDElTU1VFX0FDVElWRRAHEhAKDElTU1VFX0NMT1NFRBAKEhIK",
            "DklTU1VFX1JFSkVDVEVEEAtCdQobYXBwLmF2aWtvbS50eXBlcy5hc3Npc3Rh",
            "bmNlWjxnaXRsYWIudWIudW5pLWJpZWxlZmVsZC5kZS9hdmlrb20vZ28tdHlw",
            "ZXMvYXZpa29tL2Fzc2lzdGFuY2WqAhdBdmlrb20uVHlwZXMuQXNzaXN0YW5j",
            "ZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Avikom.Types.Assistance.SceneReflection.Descriptor, global::Avikom.Types.Assistance.TaskReflection.Descriptor, global::Avikom.Types.Options.OptionsReflection.Descriptor, global::Avikom.Types.Generic.UserReflection.Descriptor, global::Avikom.Types.Generic.KeyValuePairReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Avikom.Types.Assistance.IssueStatus), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Avikom.Types.Assistance.Issue), global::Avikom.Types.Assistance.Issue.Parser, new[]{ "Id", "Issuer", "Description", "Scene", "Task", "Include", "Exclude", "Parameters", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Avikom.Types.Assistance.IssueList), global::Avikom.Types.Assistance.IssueList.Parser, new[]{ "Issues" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  ///*
  /// The status of an issue. Can be used to find unresolved tasks and filter issue lists.
  /// @author Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public enum IssueStatus {
    /// <summary>
    //// default; should not be set explicitely
    /// </summary>
    [pbr::OriginalName("ISSUE_UNKNOWN")] IssueUnknown = 0,
    /// <summary>
    //// issue needs to be resolved
    /// </summary>
    [pbr::OriginalName("ISSUE_OPEN")] IssueOpen = 1,
    /// <summary>
    //// issue has been assigned to a user
    /// </summary>
    [pbr::OriginalName("ISSUE_ASSIGNED")] IssueAssigned = 5,
    /// <summary>
    //// issue is currently resolved by a user
    /// </summary>
    [pbr::OriginalName("ISSUE_ACTIVE")] IssueActive = 7,
    /// <summary>
    //// issue has been resolved
    /// </summary>
    [pbr::OriginalName("ISSUE_CLOSED")] IssueClosed = 10,
    /// <summary>
    //// issue cannot be resolved or has been declined 
    /// </summary>
    [pbr::OriginalName("ISSUE_REJECTED")] IssueRejected = 11,
  }

  #endregion

  #region Messages
  /// <summary>
  ///*
  /// An message that contains informations about (postponed) tasks and their state.
  /// @author Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public sealed partial class Issue : pb::IMessage<Issue> {
    private static readonly pb::MessageParser<Issue> _parser = new pb::MessageParser<Issue>(() => new Issue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Issue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Avikom.Types.Assistance.IssueReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Issue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Issue(Issue other) : this() {
      id_ = other.id_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      description_ = other.description_;
      scene_ = other.scene_ != null ? other.scene_.Clone() : null;
      task_ = other.task_ != null ? other.task_.Clone() : null;
      include_ = other.include_.Clone();
      exclude_ = other.exclude_.Clone();
      parameters_ = other.parameters_.Clone();
      status_ = other.status_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Issue Clone() {
      return new Issue(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    /// <summary>
    //// id of a task; must be set for creation!
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 2;
    private global::Avikom.Types.Generic.User issuer_;
    /// <summary>
    //// who issued the task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Avikom.Types.Generic.User Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    /// <summary>
    //// an optional text message 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scene" field.</summary>
    public const int SceneFieldNumber = 4;
    private global::Avikom.Types.Assistance.Scene scene_;
    /// <summary>
    //// location where the task needs to be conducted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Avikom.Types.Assistance.Scene Scene {
      get { return scene_; }
      set {
        scene_ = value;
      }
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 5;
    private global::Avikom.Types.Assistance.Task task_;
    /// <summary>
    //// the task to be done
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Avikom.Types.Assistance.Task Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    /// <summary>Field number for the "include" field.</summary>
    public const int IncludeFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Avikom.Types.Generic.User> _repeated_include_codec
        = pb::FieldCodec.ForMessage(50, global::Avikom.Types.Generic.User.Parser);
    private readonly pbc::RepeatedField<global::Avikom.Types.Generic.User> include_ = new pbc::RepeatedField<global::Avikom.Types.Generic.User>();
    /// <summary>
    //// users that are eligible for that task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Avikom.Types.Generic.User> Include {
      get { return include_; }
    }

    /// <summary>Field number for the "exclude" field.</summary>
    public const int ExcludeFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Avikom.Types.Generic.User> _repeated_exclude_codec
        = pb::FieldCodec.ForMessage(58, global::Avikom.Types.Generic.User.Parser);
    private readonly pbc::RepeatedField<global::Avikom.Types.Generic.User> exclude_ = new pbc::RepeatedField<global::Avikom.Types.Generic.User>();
    /// <summary>
    //// users that should not be eligible for that issue; only considered when include is empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Avikom.Types.Generic.User> Exclude {
      get { return exclude_; }
    }

    /// <summary>Field number for the "parameters" field.</summary>
    public const int ParametersFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Avikom.Types.Generic.KeyValuePair> _repeated_parameters_codec
        = pb::FieldCodec.ForMessage(66, global::Avikom.Types.Generic.KeyValuePair.Parser);
    private readonly pbc::RepeatedField<global::Avikom.Types.Generic.KeyValuePair> parameters_ = new pbc::RepeatedField<global::Avikom.Types.Generic.KeyValuePair>();
    /// <summary>
    //// this is passed to camunda
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Avikom.Types.Generic.KeyValuePair> Parameters {
      get { return parameters_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 9;
    private global::Avikom.Types.Assistance.IssueStatus status_ = 0;
    /// <summary>
    //// status of the issue
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Avikom.Types.Assistance.IssueStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Issue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Issue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (Description != other.Description) return false;
      if (!object.Equals(Scene, other.Scene)) return false;
      if (!object.Equals(Task, other.Task)) return false;
      if(!include_.Equals(other.include_)) return false;
      if(!exclude_.Equals(other.exclude_)) return false;
      if(!parameters_.Equals(other.parameters_)) return false;
      if (Status != other.Status) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (scene_ != null) hash ^= Scene.GetHashCode();
      if (task_ != null) hash ^= Task.GetHashCode();
      hash ^= include_.GetHashCode();
      hash ^= exclude_.GetHashCode();
      hash ^= parameters_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (issuer_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Issuer);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (scene_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Scene);
      }
      if (task_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Task);
      }
      include_.WriteTo(output, _repeated_include_codec);
      exclude_.WriteTo(output, _repeated_exclude_codec);
      parameters_.WriteTo(output, _repeated_parameters_codec);
      if (Status != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (scene_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scene);
      }
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      size += include_.CalculateSize(_repeated_include_codec);
      size += exclude_.CalculateSize(_repeated_exclude_codec);
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Issue other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::Avikom.Types.Generic.User();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.scene_ != null) {
        if (scene_ == null) {
          Scene = new global::Avikom.Types.Assistance.Scene();
        }
        Scene.MergeFrom(other.Scene);
      }
      if (other.task_ != null) {
        if (task_ == null) {
          Task = new global::Avikom.Types.Assistance.Task();
        }
        Task.MergeFrom(other.Task);
      }
      include_.Add(other.include_);
      exclude_.Add(other.exclude_);
      parameters_.Add(other.parameters_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 18: {
            if (issuer_ == null) {
              Issuer = new global::Avikom.Types.Generic.User();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 34: {
            if (scene_ == null) {
              Scene = new global::Avikom.Types.Assistance.Scene();
            }
            input.ReadMessage(Scene);
            break;
          }
          case 42: {
            if (task_ == null) {
              Task = new global::Avikom.Types.Assistance.Task();
            }
            input.ReadMessage(Task);
            break;
          }
          case 50: {
            include_.AddEntriesFrom(input, _repeated_include_codec);
            break;
          }
          case 58: {
            exclude_.AddEntriesFrom(input, _repeated_exclude_codec);
            break;
          }
          case 66: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
          case 72: {
            Status = (global::Avikom.Types.Assistance.IssueStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///*
  /// A collection of `Issue` objects.
  /// @author Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public sealed partial class IssueList : pb::IMessage<IssueList> {
    private static readonly pb::MessageParser<IssueList> _parser = new pb::MessageParser<IssueList>(() => new IssueList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IssueList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Avikom.Types.Assistance.IssueReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueList(IssueList other) : this() {
      issues_ = other.issues_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueList Clone() {
      return new IssueList(this);
    }

    /// <summary>Field number for the "issues" field.</summary>
    public const int IssuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Avikom.Types.Assistance.Issue> _repeated_issues_codec
        = pb::FieldCodec.ForMessage(10, global::Avikom.Types.Assistance.Issue.Parser);
    private readonly pbc::RepeatedField<global::Avikom.Types.Assistance.Issue> issues_ = new pbc::RepeatedField<global::Avikom.Types.Assistance.Issue>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Avikom.Types.Assistance.Issue> Issues {
      get { return issues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IssueList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IssueList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!issues_.Equals(other.issues_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= issues_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      issues_.WriteTo(output, _repeated_issues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += issues_.CalculateSize(_repeated_issues_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IssueList other) {
      if (other == null) {
        return;
      }
      issues_.Add(other.issues_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            issues_.AddEntriesFrom(input, _repeated_issues_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
