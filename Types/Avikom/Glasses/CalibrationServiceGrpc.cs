// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/glasses/calibration_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Avikom.Types.Glasses {
  /// <summary>
  ///*
  /// This service can be used to retrieve information about the system's calibration state.
  /// It is primarily intended for spatial computing devices that synchronize digital and real-world artifacts with so called space pins.
  /// Note: right now, AVIKOM calibrates 'on the fly' and does not make use of this interface.
  /// @author: Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public static partial class CalibrationService
  {
    static readonly string __ServiceName = "avikom.glasses.CalibrationService";

    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Unity.GameObject> __Marshaller_avikom_unity_GameObject = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Unity.GameObject.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Glasses.SpacePinNames> __Marshaller_avikom_glasses_SpacePinNames = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Glasses.SpacePinNames.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Unity.GameObject> __Method_GetUncalibratedSpacePin = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Unity.GameObject>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUncalibratedSpacePin",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_avikom_unity_GameObject);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Glasses.SpacePinNames> __Method_GetSpacePinNames = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Glasses.SpacePinNames>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSpacePinNames",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_avikom_glasses_SpacePinNames);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Avikom.Types.Glasses.CalibrationServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CalibrationService</summary>
    [grpc::BindServiceMethod(typeof(CalibrationService), "BindService")]
    public abstract partial class CalibrationServiceBase
    {
      /// <summary>
      //// returns the next uncalibrated/unassigned anchor/space pin
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Unity.GameObject> GetUncalibratedSpacePin(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// get the names of all world anchors/space pins; intended for situations where the user should decide which target to calibrate next
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Glasses.SpacePinNames> GetSpacePinNames(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CalibrationService</summary>
    public partial class CalibrationServiceClient : grpc::ClientBase<CalibrationServiceClient>
    {
      /// <summary>Creates a new client for CalibrationService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CalibrationServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CalibrationService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CalibrationServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CalibrationServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CalibrationServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// returns the next uncalibrated/unassigned anchor/space pin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Unity.GameObject GetUncalibratedSpacePin(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUncalibratedSpacePin(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns the next uncalibrated/unassigned anchor/space pin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Unity.GameObject GetUncalibratedSpacePin(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUncalibratedSpacePin, null, options, request);
      }
      /// <summary>
      //// returns the next uncalibrated/unassigned anchor/space pin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Unity.GameObject> GetUncalibratedSpacePinAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUncalibratedSpacePinAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns the next uncalibrated/unassigned anchor/space pin
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Unity.GameObject> GetUncalibratedSpacePinAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUncalibratedSpacePin, null, options, request);
      }
      /// <summary>
      //// get the names of all world anchors/space pins; intended for situations where the user should decide which target to calibrate next
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Glasses.SpacePinNames GetSpacePinNames(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSpacePinNames(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// get the names of all world anchors/space pins; intended for situations where the user should decide which target to calibrate next
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Glasses.SpacePinNames GetSpacePinNames(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSpacePinNames, null, options, request);
      }
      /// <summary>
      //// get the names of all world anchors/space pins; intended for situations where the user should decide which target to calibrate next
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Glasses.SpacePinNames> GetSpacePinNamesAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSpacePinNamesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// get the names of all world anchors/space pins; intended for situations where the user should decide which target to calibrate next
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Glasses.SpacePinNames> GetSpacePinNamesAsync(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSpacePinNames, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CalibrationServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CalibrationServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CalibrationServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetUncalibratedSpacePin, serviceImpl.GetUncalibratedSpacePin)
          .AddMethod(__Method_GetSpacePinNames, serviceImpl.GetSpacePinNames).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CalibrationServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_GetUncalibratedSpacePin, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Unity.GameObject>(serviceImpl.GetUncalibratedSpacePin));
      serviceBinder.AddMethod(__Method_GetSpacePinNames, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Google.Protobuf.WellKnownTypes.Empty, global::Avikom.Types.Glasses.SpacePinNames>(serviceImpl.GetSpacePinNames));
    }

  }
}
#endregion
