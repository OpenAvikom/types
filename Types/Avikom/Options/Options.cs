// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/options/options.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Avikom.Types.Options {

  /// <summary>Holder for reflection information generated from avikom/options/options.proto</summary>
  public static partial class OptionsReflection {

    #region Descriptor
    /// <summary>File descriptor for avikom/options/options.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OptionsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Chxhdmlrb20vb3B0aW9ucy9vcHRpb25zLnByb3RvEg5hdmlrb20ub3B0aW9u",
            "cxogZ29vZ2xlL3Byb3RvYnVmL2Rlc2NyaXB0b3IucHJvdG8igQEKDEZpZWxk",
            "T3B0aW9ucxINCgVpbmRleBgBIAEoCBIOCgZ1bmlxdWUYAiABKAgSDwoHZGVm",
            "YXVsdBgDIAEoCRINCgVtYXRjaBgEIAEoCRILCgNtaW4YBSABKAkSEQoJaW1t",
            "dXRhYmxlGAYgASgIEhIKCmF1dG9faW5kZXgYByABKAg6TQoGc2NoZW1hEh0u",
            "Z29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucxjRhgMgASgLMhwuYXZpa29t",
            "Lm9wdGlvbnMuRmllbGRPcHRpb25zOjwKEXNjaGVtYV9kZWZpbml0aW9uEh8u",
            "Z29vZ2xlLnByb3RvYnVmLk1lc3NhZ2VPcHRpb25zGNGGAyABKAhCbAoYYXBw",
            "LmF2aWtvbS50eXBlcy5vcHRpb25zWjlnaXRsYWIudWIudW5pLWJpZWxlZmVs",
            "ZC5kZS9hdmlrb20vZ28tdHlwZXMvYXZpa29tL29wdGlvbnOqAhRBdmlrb20u",
            "VHlwZXMuT3B0aW9uc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { pbr::FileDescriptor.DescriptorProtoFileDescriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Avikom.Types.Options.FieldOptions), global::Avikom.Types.Options.FieldOptions.Parser, new[]{ "Index", "Unique", "Default", "Match", "Min", "Immutable", "AutoIndex" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// This is a meta message which is not supposed to be shared but used to define database-related properties.
  /// These properties will be evaluated by the protoc converter plugins to determine -- for instance -- the mongoDB schema required to store and retrieve a decorated message.
  /// @author: Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public sealed partial class FieldOptions : pb::IMessage<FieldOptions> {
    private static readonly pb::MessageParser<FieldOptions> _parser = new pb::MessageParser<FieldOptions>(() => new FieldOptions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FieldOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Avikom.Types.Options.OptionsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldOptions(FieldOptions other) : this() {
      index_ = other.index_;
      unique_ = other.unique_;
      default_ = other.default_;
      match_ = other.match_;
      min_ = other.min_;
      immutable_ = other.immutable_;
      autoIndex_ = other.autoIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FieldOptions Clone() {
      return new FieldOptions(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private bool index_;
    /// <summary>
    //// marks the field as index; NOTE: unused; use 'unique' instead
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "unique" field.</summary>
    public const int UniqueFieldNumber = 2;
    private bool unique_;
    /// <summary>
    //// interprete field as key for the schema; will generate approriate helper functions to retrieve documents
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Unique {
      get { return unique_; }
      set {
        unique_ = value;
      }
    }

    /// <summary>Field number for the "default" field.</summary>
    public const int DefaultFieldNumber = 3;
    private string default_ = "";
    /// <summary>
    //// define default value for an (optional) field
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Default {
      get { return default_; }
      set {
        default_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "match" field.</summary>
    public const int MatchFieldNumber = 4;
    private string match_ = "";
    /// <summary>
    //// regex for data validation; NOTE: unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Match {
      get { return match_; }
      set {
        match_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 5;
    private string min_ = "";
    /// <summary>
    //// minimal value for a field; NOTE: unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Min {
      get { return min_; }
      set {
        min_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "immutable" field.</summary>
    public const int ImmutableFieldNumber = 6;
    private bool immutable_;
    /// <summary>
    //// mark a field as unchangeable; NOTE: unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Immutable {
      get { return immutable_; }
      set {
        immutable_ = value;
      }
    }

    /// <summary>Field number for the "auto_index" field.</summary>
    public const int AutoIndexFieldNumber = 7;
    private bool autoIndex_;
    /// <summary>
    //// increase the index automatically; NOTE: unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AutoIndex {
      get { return autoIndex_; }
      set {
        autoIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FieldOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FieldOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Unique != other.Unique) return false;
      if (Default != other.Default) return false;
      if (Match != other.Match) return false;
      if (Min != other.Min) return false;
      if (Immutable != other.Immutable) return false;
      if (AutoIndex != other.AutoIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != false) hash ^= Index.GetHashCode();
      if (Unique != false) hash ^= Unique.GetHashCode();
      if (Default.Length != 0) hash ^= Default.GetHashCode();
      if (Match.Length != 0) hash ^= Match.GetHashCode();
      if (Min.Length != 0) hash ^= Min.GetHashCode();
      if (Immutable != false) hash ^= Immutable.GetHashCode();
      if (AutoIndex != false) hash ^= AutoIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != false) {
        output.WriteRawTag(8);
        output.WriteBool(Index);
      }
      if (Unique != false) {
        output.WriteRawTag(16);
        output.WriteBool(Unique);
      }
      if (Default.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Default);
      }
      if (Match.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Match);
      }
      if (Min.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Min);
      }
      if (Immutable != false) {
        output.WriteRawTag(48);
        output.WriteBool(Immutable);
      }
      if (AutoIndex != false) {
        output.WriteRawTag(56);
        output.WriteBool(AutoIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != false) {
        size += 1 + 1;
      }
      if (Unique != false) {
        size += 1 + 1;
      }
      if (Default.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Default);
      }
      if (Match.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Match);
      }
      if (Min.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Min);
      }
      if (Immutable != false) {
        size += 1 + 1;
      }
      if (AutoIndex != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FieldOptions other) {
      if (other == null) {
        return;
      }
      if (other.Index != false) {
        Index = other.Index;
      }
      if (other.Unique != false) {
        Unique = other.Unique;
      }
      if (other.Default.Length != 0) {
        Default = other.Default;
      }
      if (other.Match.Length != 0) {
        Match = other.Match;
      }
      if (other.Min.Length != 0) {
        Min = other.Min;
      }
      if (other.Immutable != false) {
        Immutable = other.Immutable;
      }
      if (other.AutoIndex != false) {
        AutoIndex = other.AutoIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadBool();
            break;
          }
          case 16: {
            Unique = input.ReadBool();
            break;
          }
          case 26: {
            Default = input.ReadString();
            break;
          }
          case 34: {
            Match = input.ReadString();
            break;
          }
          case 42: {
            Min = input.ReadString();
            break;
          }
          case 48: {
            Immutable = input.ReadBool();
            break;
          }
          case 56: {
            AutoIndex = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
