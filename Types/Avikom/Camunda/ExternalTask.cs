// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/camunda/external_task.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Avikom.Types.Camunda {

  /// <summary>Holder for reflection information generated from avikom/camunda/external_task.proto</summary>
  public static partial class ExternalTaskReflection {

    #region Descriptor
    /// <summary>File descriptor for avikom/camunda/external_task.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ExternalTaskReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJhdmlrb20vY2FtdW5kYS9leHRlcm5hbF90YXNrLnByb3RvEg5hdmlrb20u",
            "Y2FtdW5kYRodYXZpa29tL2NhbXVuZGEvdmFyaWFibGUucHJvdG8i/gIKDEV4",
            "dGVybmFsVGFzaxITCgthY3Rpdml0eV9pZBgBIAEoCRIcChRhY3Rpdml0eV9p",
            "bnN0YW5jZV9pZBgCIAEoCRIVCg1lcnJvcl9tZXNzYWdlGAMgASgJEhQKDGV4",
            "ZWN1dGlvbl9pZBgEIAEoCRIKCgJpZBgFIAEoCRIcChRsb2NrX2V4cGlyYXRp",
            "b25fdGltZRgGIAEoCRIdChVwcm9jZXNzX2RlZmluaXRpb25faWQYByABKAkS",
            "HgoWcHJvY2Vzc19kZWZpbml0aW9uX2tleRgIIAEoCRIbChNwcm9jZXNzX2lu",
            "c3RhbmNlX2lkGAkgASgJEhEKCXRlbmFudF9pZBgKIAEoCRIPCgdyZXRyaWVz",
            "GAsgASgFEhEKCXdvcmtlcl9pZBgMIAEoCRIQCghwcmlvcml0eRgNIAEoBRIS",
            "Cgp0b3BpY19uYW1lGA4gASgJEisKCXZhcmlhYmxlcxgPIAMoCzIYLmF2aWtv",
            "bS5jYW11bmRhLlZhcmlhYmxlQmwKGGFwcC5hdmlrb20udHlwZXMuY2FtdW5k",
            "YVo5Z2l0bGFiLnViLnVuaS1iaWVsZWZlbGQuZGUvYXZpa29tL2dvLXR5cGVz",
            "L2F2aWtvbS9jYW11bmRhqgIUQXZpa29tLlR5cGVzLkNhbXVuZGFiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Avikom.Types.Camunda.VariableReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Avikom.Types.Camunda.ExternalTask), global::Avikom.Types.Camunda.ExternalTask.Parser, new[]{ "ActivityId", "ActivityInstanceId", "ErrorMessage", "ExecutionId", "Id", "LockExpirationTime", "ProcessDefinitionId", "ProcessDefinitionKey", "ProcessInstanceId", "TenantId", "Retries", "WorkerId", "Priority", "TopicName", "Variables" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// A storable representation of an external task published by the BPM engine (Camunda).
  /// The field description has been derived from the official REST-API documentation.
  /// @author Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public sealed partial class ExternalTask : pb::IMessage<ExternalTask> {
    private static readonly pb::MessageParser<ExternalTask> _parser = new pb::MessageParser<ExternalTask>(() => new ExternalTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExternalTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Avikom.Types.Camunda.ExternalTaskReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalTask(ExternalTask other) : this() {
      activityId_ = other.activityId_;
      activityInstanceId_ = other.activityInstanceId_;
      errorMessage_ = other.errorMessage_;
      executionId_ = other.executionId_;
      id_ = other.id_;
      lockExpirationTime_ = other.lockExpirationTime_;
      processDefinitionId_ = other.processDefinitionId_;
      processDefinitionKey_ = other.processDefinitionKey_;
      processInstanceId_ = other.processInstanceId_;
      tenantId_ = other.tenantId_;
      retries_ = other.retries_;
      workerId_ = other.workerId_;
      priority_ = other.priority_;
      topicName_ = other.topicName_;
      variables_ = other.variables_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExternalTask Clone() {
      return new ExternalTask(this);
    }

    /// <summary>Field number for the "activity_id" field.</summary>
    public const int ActivityIdFieldNumber = 1;
    private string activityId_ = "";
    /// <summary>
    //// id of the activity that this external task belongs to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActivityId {
      get { return activityId_; }
      set {
        activityId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "activity_instance_id" field.</summary>
    public const int ActivityInstanceIdFieldNumber = 2;
    private string activityInstanceId_ = "";
    /// <summary>
    //// id of the activity instance that the external task belongs to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ActivityInstanceId {
      get { return activityInstanceId_; }
      set {
        activityInstanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "error_message" field.</summary>
    public const int ErrorMessageFieldNumber = 3;
    private string errorMessage_ = "";
    /// <summary>
    //// error message that was supplied when the last failure of this task was reported
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMessage {
      get { return errorMessage_; }
      set {
        errorMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "execution_id" field.</summary>
    public const int ExecutionIdFieldNumber = 4;
    private string executionId_ = "";
    /// <summary>
    //// id of the execution that the external task belongs to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExecutionId {
      get { return executionId_; }
      set {
        executionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 5;
    private string id_ = "";
    /// <summary>
    //// external task's id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lock_expiration_time" field.</summary>
    public const int LockExpirationTimeFieldNumber = 6;
    private string lockExpirationTime_ = "";
    /// <summary>
    //// date that the task's most recent lock expires or has expired
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LockExpirationTime {
      get { return lockExpirationTime_; }
      set {
        lockExpirationTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "process_definition_id" field.</summary>
    public const int ProcessDefinitionIdFieldNumber = 7;
    private string processDefinitionId_ = "";
    /// <summary>
    //// id of the process definition the external task is defined in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessDefinitionId {
      get { return processDefinitionId_; }
      set {
        processDefinitionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "process_definition_key" field.</summary>
    public const int ProcessDefinitionKeyFieldNumber = 8;
    private string processDefinitionKey_ = "";
    /// <summary>
    //// key of the process definition the external task is defined in
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessDefinitionKey {
      get { return processDefinitionKey_; }
      set {
        processDefinitionKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "process_instance_id" field.</summary>
    public const int ProcessInstanceIdFieldNumber = 9;
    private string processInstanceId_ = "";
    /// <summary>
    //// id of the process instance the external task belongs to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessInstanceId {
      get { return processInstanceId_; }
      set {
        processInstanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tenant_id" field.</summary>
    public const int TenantIdFieldNumber = 10;
    private string tenantId_ = "";
    /// <summary>
    //// id of the tenant the external task belongs to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TenantId {
      get { return tenantId_; }
      set {
        tenantId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "retries" field.</summary>
    public const int RetriesFieldNumber = 11;
    private int retries_;
    /// <summary>
    //// number of retries the task currently has left
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Retries {
      get { return retries_; }
      set {
        retries_ = value;
      }
    }

    /// <summary>Field number for the "worker_id" field.</summary>
    public const int WorkerIdFieldNumber = 12;
    private string workerId_ = "";
    /// <summary>
    //// id of the worker that posesses or posessed the most recent lock
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkerId {
      get { return workerId_; }
      set {
        workerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 13;
    private int priority_;
    /// <summary>
    //// priority of the external task
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "topic_name" field.</summary>
    public const int TopicNameFieldNumber = 14;
    private string topicName_ = "";
    /// <summary>
    //// external task's topic name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TopicName {
      get { return topicName_; }
      set {
        topicName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "variables" field.</summary>
    public const int VariablesFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Avikom.Types.Camunda.Variable> _repeated_variables_codec
        = pb::FieldCodec.ForMessage(122, global::Avikom.Types.Camunda.Variable.Parser);
    private readonly pbc::RepeatedField<global::Avikom.Types.Camunda.Variable> variables_ = new pbc::RepeatedField<global::Avikom.Types.Camunda.Variable>();
    /// <summary>
    //// a set of local and global variables passed to the external service
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Avikom.Types.Camunda.Variable> Variables {
      get { return variables_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExternalTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExternalTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ActivityId != other.ActivityId) return false;
      if (ActivityInstanceId != other.ActivityInstanceId) return false;
      if (ErrorMessage != other.ErrorMessage) return false;
      if (ExecutionId != other.ExecutionId) return false;
      if (Id != other.Id) return false;
      if (LockExpirationTime != other.LockExpirationTime) return false;
      if (ProcessDefinitionId != other.ProcessDefinitionId) return false;
      if (ProcessDefinitionKey != other.ProcessDefinitionKey) return false;
      if (ProcessInstanceId != other.ProcessInstanceId) return false;
      if (TenantId != other.TenantId) return false;
      if (Retries != other.Retries) return false;
      if (WorkerId != other.WorkerId) return false;
      if (Priority != other.Priority) return false;
      if (TopicName != other.TopicName) return false;
      if(!variables_.Equals(other.variables_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ActivityId.Length != 0) hash ^= ActivityId.GetHashCode();
      if (ActivityInstanceId.Length != 0) hash ^= ActivityInstanceId.GetHashCode();
      if (ErrorMessage.Length != 0) hash ^= ErrorMessage.GetHashCode();
      if (ExecutionId.Length != 0) hash ^= ExecutionId.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (LockExpirationTime.Length != 0) hash ^= LockExpirationTime.GetHashCode();
      if (ProcessDefinitionId.Length != 0) hash ^= ProcessDefinitionId.GetHashCode();
      if (ProcessDefinitionKey.Length != 0) hash ^= ProcessDefinitionKey.GetHashCode();
      if (ProcessInstanceId.Length != 0) hash ^= ProcessInstanceId.GetHashCode();
      if (TenantId.Length != 0) hash ^= TenantId.GetHashCode();
      if (Retries != 0) hash ^= Retries.GetHashCode();
      if (WorkerId.Length != 0) hash ^= WorkerId.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (TopicName.Length != 0) hash ^= TopicName.GetHashCode();
      hash ^= variables_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ActivityId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ActivityId);
      }
      if (ActivityInstanceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ActivityInstanceId);
      }
      if (ErrorMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ErrorMessage);
      }
      if (ExecutionId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ExecutionId);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Id);
      }
      if (LockExpirationTime.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(LockExpirationTime);
      }
      if (ProcessDefinitionId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ProcessDefinitionId);
      }
      if (ProcessDefinitionKey.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ProcessDefinitionKey);
      }
      if (ProcessInstanceId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(ProcessInstanceId);
      }
      if (TenantId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(TenantId);
      }
      if (Retries != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Retries);
      }
      if (WorkerId.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(WorkerId);
      }
      if (Priority != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Priority);
      }
      if (TopicName.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(TopicName);
      }
      variables_.WriteTo(output, _repeated_variables_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ActivityId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityId);
      }
      if (ActivityInstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ActivityInstanceId);
      }
      if (ErrorMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMessage);
      }
      if (ExecutionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExecutionId);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (LockExpirationTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LockExpirationTime);
      }
      if (ProcessDefinitionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessDefinitionId);
      }
      if (ProcessDefinitionKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessDefinitionKey);
      }
      if (ProcessInstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessInstanceId);
      }
      if (TenantId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TenantId);
      }
      if (Retries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Retries);
      }
      if (WorkerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkerId);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (TopicName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TopicName);
      }
      size += variables_.CalculateSize(_repeated_variables_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExternalTask other) {
      if (other == null) {
        return;
      }
      if (other.ActivityId.Length != 0) {
        ActivityId = other.ActivityId;
      }
      if (other.ActivityInstanceId.Length != 0) {
        ActivityInstanceId = other.ActivityInstanceId;
      }
      if (other.ErrorMessage.Length != 0) {
        ErrorMessage = other.ErrorMessage;
      }
      if (other.ExecutionId.Length != 0) {
        ExecutionId = other.ExecutionId;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.LockExpirationTime.Length != 0) {
        LockExpirationTime = other.LockExpirationTime;
      }
      if (other.ProcessDefinitionId.Length != 0) {
        ProcessDefinitionId = other.ProcessDefinitionId;
      }
      if (other.ProcessDefinitionKey.Length != 0) {
        ProcessDefinitionKey = other.ProcessDefinitionKey;
      }
      if (other.ProcessInstanceId.Length != 0) {
        ProcessInstanceId = other.ProcessInstanceId;
      }
      if (other.TenantId.Length != 0) {
        TenantId = other.TenantId;
      }
      if (other.Retries != 0) {
        Retries = other.Retries;
      }
      if (other.WorkerId.Length != 0) {
        WorkerId = other.WorkerId;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.TopicName.Length != 0) {
        TopicName = other.TopicName;
      }
      variables_.Add(other.variables_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ActivityId = input.ReadString();
            break;
          }
          case 18: {
            ActivityInstanceId = input.ReadString();
            break;
          }
          case 26: {
            ErrorMessage = input.ReadString();
            break;
          }
          case 34: {
            ExecutionId = input.ReadString();
            break;
          }
          case 42: {
            Id = input.ReadString();
            break;
          }
          case 50: {
            LockExpirationTime = input.ReadString();
            break;
          }
          case 58: {
            ProcessDefinitionId = input.ReadString();
            break;
          }
          case 66: {
            ProcessDefinitionKey = input.ReadString();
            break;
          }
          case 74: {
            ProcessInstanceId = input.ReadString();
            break;
          }
          case 82: {
            TenantId = input.ReadString();
            break;
          }
          case 88: {
            Retries = input.ReadInt32();
            break;
          }
          case 98: {
            WorkerId = input.ReadString();
            break;
          }
          case 104: {
            Priority = input.ReadInt32();
            break;
          }
          case 114: {
            TopicName = input.ReadString();
            break;
          }
          case 122: {
            variables_.AddEntriesFrom(input, _repeated_variables_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
