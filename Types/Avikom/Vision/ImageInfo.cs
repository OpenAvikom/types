// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/vision/image_info.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Avikom.Types.Vision {

  /// <summary>Holder for reflection information generated from avikom/vision/image_info.proto</summary>
  public static partial class ImageInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for avikom/vision/image_info.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImageInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5hdmlrb20vdmlzaW9uL2ltYWdlX2luZm8ucHJvdG8SDWF2aWtvbS52aXNp",
            "b24iYAoJSW1hZ2VJbmZvEgwKBHNpemUYASABKAUSEgoKY2h1bmtfc2l6ZRgC",
            "IAEoBRISCgpjb21wcmVzc2VkGAMgASgIEg0KBXdpZHRoGAQgASgFEg4KBmhl",
            "aWdodBgFIAEoBUJpChdhcHAuYXZpa29tLnR5cGVzLnZpc2lvblo4Z2l0bGFi",
            "LnViLnVuaS1iaWVsZWZlbGQuZGUvYXZpa29tL2dvLXR5cGVzL2F2aWtvbS92",
            "aXNpb26qAhNBdmlrb20uVHlwZXMuVmlzaW9uYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Avikom.Types.Vision.ImageInfo), global::Avikom.Types.Vision.ImageInfo.Parser, new[]{ "Size", "ChunkSize", "Compressed", "Width", "Height" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// This message is a header for image data transfer in chunks.
  /// It should always be set in the first `Image` message send to an image receiver.
  /// @author: Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public sealed partial class ImageInfo : pb::IMessage<ImageInfo> {
    private static readonly pb::MessageParser<ImageInfo> _parser = new pb::MessageParser<ImageInfo>(() => new ImageInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Avikom.Types.Vision.ImageInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageInfo(ImageInfo other) : this() {
      size_ = other.size_;
      chunkSize_ = other.chunkSize_;
      compressed_ = other.compressed_;
      width_ = other.width_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageInfo Clone() {
      return new ImageInfo(this);
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 1;
    private int size_;
    /// <summary>
    //// size of the image in bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "chunk_size" field.</summary>
    public const int ChunkSizeFieldNumber = 2;
    private int chunkSize_;
    /// <summary>
    //// transfer chunk size in bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChunkSize {
      get { return chunkSize_; }
      set {
        chunkSize_ = value;
      }
    }

    /// <summary>Field number for the "compressed" field.</summary>
    public const int CompressedFieldNumber = 3;
    private bool compressed_;
    /// <summary>
    //// whether the image has been compressed or send raw; NOTE: this field is not considered right now by the `ImageService`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Compressed {
      get { return compressed_; }
      set {
        compressed_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private int width_;
    /// <summary>
    //// pixel width of the image
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 5;
    private int height_;
    /// <summary>
    //// pixel height of the image
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Size != other.Size) return false;
      if (ChunkSize != other.ChunkSize) return false;
      if (Compressed != other.Compressed) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Size != 0) hash ^= Size.GetHashCode();
      if (ChunkSize != 0) hash ^= ChunkSize.GetHashCode();
      if (Compressed != false) hash ^= Compressed.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Size != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Size);
      }
      if (ChunkSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChunkSize);
      }
      if (Compressed != false) {
        output.WriteRawTag(24);
        output.WriteBool(Compressed);
      }
      if (Width != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (ChunkSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChunkSize);
      }
      if (Compressed != false) {
        size += 1 + 1;
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageInfo other) {
      if (other == null) {
        return;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.ChunkSize != 0) {
        ChunkSize = other.ChunkSize;
      }
      if (other.Compressed != false) {
        Compressed = other.Compressed;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Size = input.ReadInt32();
            break;
          }
          case 16: {
            ChunkSize = input.ReadInt32();
            break;
          }
          case 24: {
            Compressed = input.ReadBool();
            break;
          }
          case 32: {
            Width = input.ReadInt32();
            break;
          }
          case 40: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
