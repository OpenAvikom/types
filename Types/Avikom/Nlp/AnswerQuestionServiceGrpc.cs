// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/nlp/answer_question_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Avikom.Types.Nlp {
  /// <summary>
  ///*
  /// This service sends a question and context as requests to the nlp module (currently HuggingFace).
  /// For example, you might want to extract information from a text by asking a question. You assume, that 
  /// the answer to your question can be found within the text.
  /// @author: Lars Schalkwijk &lt;lars.schalkwijk@fh-bielefeld.de>
  /// </summary>
  public static partial class AnswerQuestionService
  {
    static readonly string __ServiceName = "avikom.nlp.AnswerQuestionService";

    static readonly grpc::Marshaller<global::Avikom.Types.Nlp.AnswerQuestionQuery> __Marshaller_avikom_nlp_AnswerQuestionQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Nlp.AnswerQuestionQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Nlp.AnswerQuestionResponse> __Marshaller_avikom_nlp_AnswerQuestionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Nlp.AnswerQuestionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Avikom.Types.Nlp.AnswerQuestionQuery, global::Avikom.Types.Nlp.AnswerQuestionResponse> __Method_AnswerQuestion = new grpc::Method<global::Avikom.Types.Nlp.AnswerQuestionQuery, global::Avikom.Types.Nlp.AnswerQuestionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AnswerQuestion",
        __Marshaller_avikom_nlp_AnswerQuestionQuery,
        __Marshaller_avikom_nlp_AnswerQuestionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Avikom.Types.Nlp.AnswerQuestionServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AnswerQuestionService</summary>
    [grpc::BindServiceMethod(typeof(AnswerQuestionService), "BindService")]
    public abstract partial class AnswerQuestionServiceBase
    {
      /// <summary>
      //// the answer to the posed question is searched in the set context and returned if found; 
      //// the model is currently based on https://huggingface.co/Sahajtomar/GBERTQnA
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Nlp.AnswerQuestionResponse> AnswerQuestion(global::Avikom.Types.Nlp.AnswerQuestionQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AnswerQuestionService</summary>
    public partial class AnswerQuestionServiceClient : grpc::ClientBase<AnswerQuestionServiceClient>
    {
      /// <summary>Creates a new client for AnswerQuestionService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AnswerQuestionServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AnswerQuestionService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AnswerQuestionServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AnswerQuestionServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AnswerQuestionServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// the answer to the posed question is searched in the set context and returned if found; 
      //// the model is currently based on https://huggingface.co/Sahajtomar/GBERTQnA
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Nlp.AnswerQuestionResponse AnswerQuestion(global::Avikom.Types.Nlp.AnswerQuestionQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnswerQuestion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// the answer to the posed question is searched in the set context and returned if found; 
      //// the model is currently based on https://huggingface.co/Sahajtomar/GBERTQnA
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Nlp.AnswerQuestionResponse AnswerQuestion(global::Avikom.Types.Nlp.AnswerQuestionQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AnswerQuestion, null, options, request);
      }
      /// <summary>
      //// the answer to the posed question is searched in the set context and returned if found; 
      //// the model is currently based on https://huggingface.co/Sahajtomar/GBERTQnA
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Nlp.AnswerQuestionResponse> AnswerQuestionAsync(global::Avikom.Types.Nlp.AnswerQuestionQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AnswerQuestionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// the answer to the posed question is searched in the set context and returned if found; 
      //// the model is currently based on https://huggingface.co/Sahajtomar/GBERTQnA
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Nlp.AnswerQuestionResponse> AnswerQuestionAsync(global::Avikom.Types.Nlp.AnswerQuestionQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AnswerQuestion, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AnswerQuestionServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AnswerQuestionServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AnswerQuestionServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AnswerQuestion, serviceImpl.AnswerQuestion).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AnswerQuestionServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AnswerQuestion, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Nlp.AnswerQuestionQuery, global::Avikom.Types.Nlp.AnswerQuestionResponse>(serviceImpl.AnswerQuestion));
    }

  }
}
#endregion
