// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/unity/game_object_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Avikom.Types.Unity {
  /// <summary>
  ///*
  /// Provides an interface to add virtual objects to the current scene.
  /// @author: Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public static partial class GameObjectService
  {
    static readonly string __ServiceName = "avikom.unity.GameObjectService";

    static readonly grpc::Marshaller<global::Avikom.Types.Unity.GameObject> __Marshaller_avikom_unity_GameObject = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Unity.GameObject.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Generic.Result> __Marshaller_avikom_generic_Result = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Generic.Result.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Unity.GameObjectQuery> __Marshaller_avikom_unity_GameObjectQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Unity.GameObjectQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Unity.AssetBundle> __Marshaller_avikom_unity_AssetBundle = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Unity.AssetBundle.Parser.ParseFrom);

    static readonly grpc::Method<global::Avikom.Types.Unity.GameObject, global::Avikom.Types.Generic.Result> __Method_Add = new grpc::Method<global::Avikom.Types.Unity.GameObject, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Add",
        __Marshaller_avikom_unity_GameObject,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Unity.GameObject, global::Avikom.Types.Generic.Result> __Method_Set = new grpc::Method<global::Avikom.Types.Unity.GameObject, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Set",
        __Marshaller_avikom_unity_GameObject,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Unity.GameObjectQuery, global::Avikom.Types.Unity.GameObject> __Method_Get = new grpc::Method<global::Avikom.Types.Unity.GameObjectQuery, global::Avikom.Types.Unity.GameObject>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_avikom_unity_GameObjectQuery,
        __Marshaller_avikom_unity_GameObject);

    static readonly grpc::Method<global::Avikom.Types.Unity.AssetBundle, global::Avikom.Types.Generic.Result> __Method_AddBundle = new grpc::Method<global::Avikom.Types.Unity.AssetBundle, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "AddBundle",
        __Marshaller_avikom_unity_AssetBundle,
        __Marshaller_avikom_generic_Result);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Avikom.Types.Unity.GameObjectServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of GameObjectService</summary>
    [grpc::BindServiceMethod(typeof(GameObjectService), "BindService")]
    public abstract partial class GameObjectServiceBase
    {
      /// <summary>
      //// adds an object to the scene
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> Add(global::Avikom.Types.Unity.GameObject request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// updates properties if a previously added object
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> Set(global::Avikom.Types.Unity.GameObject request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// returns current properties of a scene object
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Unity.GameObject> Get(global::Avikom.Types.Unity.GameObjectQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// uploads a bundle of assets that can be used for the creation of new objects
      /// </summary>
      /// <param name="requestStream">Used for reading requests from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> AddBundle(grpc::IAsyncStreamReader<global::Avikom.Types.Unity.AssetBundle> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for GameObjectService</summary>
    public partial class GameObjectServiceClient : grpc::ClientBase<GameObjectServiceClient>
    {
      /// <summary>Creates a new client for GameObjectService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public GameObjectServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for GameObjectService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public GameObjectServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected GameObjectServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected GameObjectServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// adds an object to the scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result Add(global::Avikom.Types.Unity.GameObject request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Add(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// adds an object to the scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result Add(global::Avikom.Types.Unity.GameObject request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Add, null, options, request);
      }
      /// <summary>
      //// adds an object to the scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> AddAsync(global::Avikom.Types.Unity.GameObject request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// adds an object to the scene
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> AddAsync(global::Avikom.Types.Unity.GameObject request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Add, null, options, request);
      }
      /// <summary>
      //// updates properties if a previously added object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result Set(global::Avikom.Types.Unity.GameObject request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Set(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates properties if a previously added object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result Set(global::Avikom.Types.Unity.GameObject request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Set, null, options, request);
      }
      /// <summary>
      //// updates properties if a previously added object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SetAsync(global::Avikom.Types.Unity.GameObject request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates properties if a previously added object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> SetAsync(global::Avikom.Types.Unity.GameObject request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Set, null, options, request);
      }
      /// <summary>
      //// returns current properties of a scene object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Unity.GameObject Get(global::Avikom.Types.Unity.GameObjectQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns current properties of a scene object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Unity.GameObject Get(global::Avikom.Types.Unity.GameObjectQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      //// returns current properties of a scene object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Unity.GameObject> GetAsync(global::Avikom.Types.Unity.GameObjectQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns current properties of a scene object
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Unity.GameObject> GetAsync(global::Avikom.Types.Unity.GameObjectQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>
      //// uploads a bundle of assets that can be used for the creation of new objects
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Avikom.Types.Unity.AssetBundle, global::Avikom.Types.Generic.Result> AddBundle(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddBundle(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// uploads a bundle of assets that can be used for the creation of new objects
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncClientStreamingCall<global::Avikom.Types.Unity.AssetBundle, global::Avikom.Types.Generic.Result> AddBundle(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_AddBundle, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override GameObjectServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new GameObjectServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(GameObjectServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Add, serviceImpl.Add)
          .AddMethod(__Method_Set, serviceImpl.Set)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_AddBundle, serviceImpl.AddBundle).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, GameObjectServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Add, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Unity.GameObject, global::Avikom.Types.Generic.Result>(serviceImpl.Add));
      serviceBinder.AddMethod(__Method_Set, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Unity.GameObject, global::Avikom.Types.Generic.Result>(serviceImpl.Set));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Unity.GameObjectQuery, global::Avikom.Types.Unity.GameObject>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_AddBundle, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Avikom.Types.Unity.AssetBundle, global::Avikom.Types.Generic.Result>(serviceImpl.AddBundle));
    }

  }
}
#endregion
