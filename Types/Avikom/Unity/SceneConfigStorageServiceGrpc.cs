// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/unity/scene_config_storage_service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Avikom.Types.Unity {
  /// <summary>
  ///*
  /// This services provides and receives scene configurations and task-specific configurations.
  /// Scene and task configurations 'stack' and must not ne contradicting.
  /// There is always just one config for a scene and a task.
  /// @author: Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public static partial class SceneConfigStorageService
  {
    static readonly string __ServiceName = "avikom.unity.SceneConfigStorageService";

    static readonly grpc::Marshaller<global::Avikom.Types.Unity.SceneConfig> __Marshaller_avikom_unity_SceneConfig = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Unity.SceneConfig.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Generic.Result> __Marshaller_avikom_generic_Result = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Generic.Result.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Unity.SceneConfigQuery> __Marshaller_avikom_unity_SceneConfigQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Unity.SceneConfigQuery.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Unity.TaskConfig> __Marshaller_avikom_unity_TaskConfig = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Unity.TaskConfig.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Avikom.Types.Unity.TaskConfigQuery> __Marshaller_avikom_unity_TaskConfigQuery = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Avikom.Types.Unity.TaskConfigQuery.Parser.ParseFrom);

    static readonly grpc::Method<global::Avikom.Types.Unity.SceneConfig, global::Avikom.Types.Generic.Result> __Method_AddSceneConfig = new grpc::Method<global::Avikom.Types.Unity.SceneConfig, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddSceneConfig",
        __Marshaller_avikom_unity_SceneConfig,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Unity.SceneConfigQuery, global::Avikom.Types.Unity.SceneConfig> __Method_GetSceneConfig = new grpc::Method<global::Avikom.Types.Unity.SceneConfigQuery, global::Avikom.Types.Unity.SceneConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSceneConfig",
        __Marshaller_avikom_unity_SceneConfigQuery,
        __Marshaller_avikom_unity_SceneConfig);

    static readonly grpc::Method<global::Avikom.Types.Unity.SceneConfig, global::Avikom.Types.Generic.Result> __Method_UpdateSceneConfig = new grpc::Method<global::Avikom.Types.Unity.SceneConfig, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSceneConfig",
        __Marshaller_avikom_unity_SceneConfig,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Unity.TaskConfig, global::Avikom.Types.Generic.Result> __Method_AddTaskConfig = new grpc::Method<global::Avikom.Types.Unity.TaskConfig, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddTaskConfig",
        __Marshaller_avikom_unity_TaskConfig,
        __Marshaller_avikom_generic_Result);

    static readonly grpc::Method<global::Avikom.Types.Unity.TaskConfigQuery, global::Avikom.Types.Unity.TaskConfig> __Method_GetTaskConfig = new grpc::Method<global::Avikom.Types.Unity.TaskConfigQuery, global::Avikom.Types.Unity.TaskConfig>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTaskConfig",
        __Marshaller_avikom_unity_TaskConfigQuery,
        __Marshaller_avikom_unity_TaskConfig);

    static readonly grpc::Method<global::Avikom.Types.Unity.TaskConfig, global::Avikom.Types.Generic.Result> __Method_UpdateTaskConfig = new grpc::Method<global::Avikom.Types.Unity.TaskConfig, global::Avikom.Types.Generic.Result>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateTaskConfig",
        __Marshaller_avikom_unity_TaskConfig,
        __Marshaller_avikom_generic_Result);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Avikom.Types.Unity.SceneConfigStorageServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SceneConfigStorageService</summary>
    [grpc::BindServiceMethod(typeof(SceneConfigStorageService), "BindService")]
    public abstract partial class SceneConfigStorageServiceBase
    {
      /// <summary>
      //// adds a scene configuration for an EXISTING scene to the storage; raises exceptions when the scene config already exists
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> AddSceneConfig(global::Avikom.Types.Unity.SceneConfig request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// returns a scene configuration to a given `scene_name`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Unity.SceneConfig> GetSceneConfig(global::Avikom.Types.Unity.SceneConfigQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// updates an existing scene configuration; raises an exception if it does not exist
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> UpdateSceneConfig(global::Avikom.Types.Unity.SceneConfig request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// adds a task configuration for an EXISTING task to the storage; raises exceptions when the task config already exists
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> AddTaskConfig(global::Avikom.Types.Unity.TaskConfig request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// returns a task configuration to a given `task_name`
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Unity.TaskConfig> GetTaskConfig(global::Avikom.Types.Unity.TaskConfigQuery request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      //// updates an existing task configuration; raises an exception if it does not exist
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Avikom.Types.Generic.Result> UpdateTaskConfig(global::Avikom.Types.Unity.TaskConfig request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SceneConfigStorageService</summary>
    public partial class SceneConfigStorageServiceClient : grpc::ClientBase<SceneConfigStorageServiceClient>
    {
      /// <summary>Creates a new client for SceneConfigStorageService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SceneConfigStorageServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SceneConfigStorageService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SceneConfigStorageServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SceneConfigStorageServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SceneConfigStorageServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      //// adds a scene configuration for an EXISTING scene to the storage; raises exceptions when the scene config already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result AddSceneConfig(global::Avikom.Types.Unity.SceneConfig request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSceneConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// adds a scene configuration for an EXISTING scene to the storage; raises exceptions when the scene config already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result AddSceneConfig(global::Avikom.Types.Unity.SceneConfig request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddSceneConfig, null, options, request);
      }
      /// <summary>
      //// adds a scene configuration for an EXISTING scene to the storage; raises exceptions when the scene config already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> AddSceneConfigAsync(global::Avikom.Types.Unity.SceneConfig request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddSceneConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// adds a scene configuration for an EXISTING scene to the storage; raises exceptions when the scene config already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> AddSceneConfigAsync(global::Avikom.Types.Unity.SceneConfig request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddSceneConfig, null, options, request);
      }
      /// <summary>
      //// returns a scene configuration to a given `scene_name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Unity.SceneConfig GetSceneConfig(global::Avikom.Types.Unity.SceneConfigQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSceneConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a scene configuration to a given `scene_name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Unity.SceneConfig GetSceneConfig(global::Avikom.Types.Unity.SceneConfigQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSceneConfig, null, options, request);
      }
      /// <summary>
      //// returns a scene configuration to a given `scene_name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Unity.SceneConfig> GetSceneConfigAsync(global::Avikom.Types.Unity.SceneConfigQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSceneConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a scene configuration to a given `scene_name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Unity.SceneConfig> GetSceneConfigAsync(global::Avikom.Types.Unity.SceneConfigQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSceneConfig, null, options, request);
      }
      /// <summary>
      //// updates an existing scene configuration; raises an exception if it does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result UpdateSceneConfig(global::Avikom.Types.Unity.SceneConfig request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSceneConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates an existing scene configuration; raises an exception if it does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result UpdateSceneConfig(global::Avikom.Types.Unity.SceneConfig request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSceneConfig, null, options, request);
      }
      /// <summary>
      //// updates an existing scene configuration; raises an exception if it does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> UpdateSceneConfigAsync(global::Avikom.Types.Unity.SceneConfig request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSceneConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates an existing scene configuration; raises an exception if it does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> UpdateSceneConfigAsync(global::Avikom.Types.Unity.SceneConfig request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSceneConfig, null, options, request);
      }
      /// <summary>
      //// adds a task configuration for an EXISTING task to the storage; raises exceptions when the task config already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result AddTaskConfig(global::Avikom.Types.Unity.TaskConfig request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddTaskConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// adds a task configuration for an EXISTING task to the storage; raises exceptions when the task config already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result AddTaskConfig(global::Avikom.Types.Unity.TaskConfig request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddTaskConfig, null, options, request);
      }
      /// <summary>
      //// adds a task configuration for an EXISTING task to the storage; raises exceptions when the task config already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> AddTaskConfigAsync(global::Avikom.Types.Unity.TaskConfig request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddTaskConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// adds a task configuration for an EXISTING task to the storage; raises exceptions when the task config already exists
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> AddTaskConfigAsync(global::Avikom.Types.Unity.TaskConfig request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddTaskConfig, null, options, request);
      }
      /// <summary>
      //// returns a task configuration to a given `task_name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Unity.TaskConfig GetTaskConfig(global::Avikom.Types.Unity.TaskConfigQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a task configuration to a given `task_name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Unity.TaskConfig GetTaskConfig(global::Avikom.Types.Unity.TaskConfigQuery request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTaskConfig, null, options, request);
      }
      /// <summary>
      //// returns a task configuration to a given `task_name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Unity.TaskConfig> GetTaskConfigAsync(global::Avikom.Types.Unity.TaskConfigQuery request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTaskConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// returns a task configuration to a given `task_name`
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Unity.TaskConfig> GetTaskConfigAsync(global::Avikom.Types.Unity.TaskConfigQuery request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTaskConfig, null, options, request);
      }
      /// <summary>
      //// updates an existing task configuration; raises an exception if it does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result UpdateTaskConfig(global::Avikom.Types.Unity.TaskConfig request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTaskConfig(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates an existing task configuration; raises an exception if it does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Avikom.Types.Generic.Result UpdateTaskConfig(global::Avikom.Types.Unity.TaskConfig request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateTaskConfig, null, options, request);
      }
      /// <summary>
      //// updates an existing task configuration; raises an exception if it does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> UpdateTaskConfigAsync(global::Avikom.Types.Unity.TaskConfig request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateTaskConfigAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      //// updates an existing task configuration; raises an exception if it does not exist
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Avikom.Types.Generic.Result> UpdateTaskConfigAsync(global::Avikom.Types.Unity.TaskConfig request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateTaskConfig, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SceneConfigStorageServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SceneConfigStorageServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SceneConfigStorageServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_AddSceneConfig, serviceImpl.AddSceneConfig)
          .AddMethod(__Method_GetSceneConfig, serviceImpl.GetSceneConfig)
          .AddMethod(__Method_UpdateSceneConfig, serviceImpl.UpdateSceneConfig)
          .AddMethod(__Method_AddTaskConfig, serviceImpl.AddTaskConfig)
          .AddMethod(__Method_GetTaskConfig, serviceImpl.GetTaskConfig)
          .AddMethod(__Method_UpdateTaskConfig, serviceImpl.UpdateTaskConfig).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, SceneConfigStorageServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_AddSceneConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Unity.SceneConfig, global::Avikom.Types.Generic.Result>(serviceImpl.AddSceneConfig));
      serviceBinder.AddMethod(__Method_GetSceneConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Unity.SceneConfigQuery, global::Avikom.Types.Unity.SceneConfig>(serviceImpl.GetSceneConfig));
      serviceBinder.AddMethod(__Method_UpdateSceneConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Unity.SceneConfig, global::Avikom.Types.Generic.Result>(serviceImpl.UpdateSceneConfig));
      serviceBinder.AddMethod(__Method_AddTaskConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Unity.TaskConfig, global::Avikom.Types.Generic.Result>(serviceImpl.AddTaskConfig));
      serviceBinder.AddMethod(__Method_GetTaskConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Unity.TaskConfigQuery, global::Avikom.Types.Unity.TaskConfig>(serviceImpl.GetTaskConfig));
      serviceBinder.AddMethod(__Method_UpdateTaskConfig, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Avikom.Types.Unity.TaskConfig, global::Avikom.Types.Generic.Result>(serviceImpl.UpdateTaskConfig));
    }

  }
}
#endregion
