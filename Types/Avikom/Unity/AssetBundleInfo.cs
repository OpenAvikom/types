// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: avikom/unity/asset_bundle_info.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Avikom.Types.Unity {

  /// <summary>Holder for reflection information generated from avikom/unity/asset_bundle_info.proto</summary>
  public static partial class AssetBundleInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for avikom/unity/asset_bundle_info.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AssetBundleInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRhdmlrb20vdW5pdHkvYXNzZXRfYnVuZGxlX2luZm8ucHJvdG8SDGF2aWtv",
            "bS51bml0eRocYXZpa29tL29wdGlvbnMvb3B0aW9ucy5wcm90byJZCg9Bc3Nl",
            "dEJ1bmRsZUluZm8SDAoEc2l6ZRgBIAEoBRISCgpjaHVua19zaXplGAIgASgF",
            "EhMKC2J1bmRsZV9uYW1lGAMgASgJEg8KB3ZlcnNpb24YBCABKAlCZgoWYXBw",
            "LmF2aWtvbS50eXBlcy51bml0eVo3Z2l0bGFiLnViLnVuaS1iaWVsZWZlbGQu",
            "ZGUvYXZpa29tL2dvLXR5cGVzL2F2aWtvbS91bml0eaoCEkF2aWtvbS5UeXBl",
            "cy5Vbml0eWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Avikom.Types.Options.OptionsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Avikom.Types.Unity.AssetBundleInfo), global::Avikom.Types.Unity.AssetBundleInfo.Parser, new[]{ "Size", "ChunkSize", "BundleName", "Version" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///*
  /// A message header to send Unity asset bundles in chunks.
  /// Should be available in every initial message to an asset bunde receiver.
  /// @author: Alexander Neumann &lt;alneuman@techfak.uni-bielefeld.de>
  /// </summary>
  public sealed partial class AssetBundleInfo : pb::IMessage<AssetBundleInfo> {
    private static readonly pb::MessageParser<AssetBundleInfo> _parser = new pb::MessageParser<AssetBundleInfo>(() => new AssetBundleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssetBundleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Avikom.Types.Unity.AssetBundleInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetBundleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetBundleInfo(AssetBundleInfo other) : this() {
      size_ = other.size_;
      chunkSize_ = other.chunkSize_;
      bundleName_ = other.bundleName_;
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetBundleInfo Clone() {
      return new AssetBundleInfo(this);
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 1;
    private int size_;
    /// <summary>
    //// size of the whole bundle in bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "chunk_size" field.</summary>
    public const int ChunkSizeFieldNumber = 2;
    private int chunkSize_;
    /// <summary>
    //// the planed size of each data chunk
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChunkSize {
      get { return chunkSize_; }
      set {
        chunkSize_ = value;
      }
    }

    /// <summary>Field number for the "bundle_name" field.</summary>
    public const int BundleNameFieldNumber = 3;
    private string bundleName_ = "";
    /// <summary>
    //// globally unique name of the asset bundle in question
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BundleName {
      get { return bundleName_; }
      set {
        bundleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private string version_ = "";
    /// <summary>
    //// version of the bundle to determine whether sending binary data is required or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssetBundleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssetBundleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Size != other.Size) return false;
      if (ChunkSize != other.ChunkSize) return false;
      if (BundleName != other.BundleName) return false;
      if (Version != other.Version) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Size != 0) hash ^= Size.GetHashCode();
      if (ChunkSize != 0) hash ^= ChunkSize.GetHashCode();
      if (BundleName.Length != 0) hash ^= BundleName.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Size != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Size);
      }
      if (ChunkSize != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChunkSize);
      }
      if (BundleName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(BundleName);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (ChunkSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChunkSize);
      }
      if (BundleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleName);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssetBundleInfo other) {
      if (other == null) {
        return;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.ChunkSize != 0) {
        ChunkSize = other.ChunkSize;
      }
      if (other.BundleName.Length != 0) {
        BundleName = other.BundleName;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Size = input.ReadInt32();
            break;
          }
          case 16: {
            ChunkSize = input.ReadInt32();
            break;
          }
          case 26: {
            BundleName = input.ReadString();
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
