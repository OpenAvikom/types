syntax = "proto3";

package avikom.assistance;

import "avikom/options/options.proto";
import "avikom/generic/result.proto";
import "avikom/assistance/session.proto";
import "avikom/assistance/session_query.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option csharp_namespace = "Avikom.Types.Assistance";
option go_package = "gitlab.ub.uni-bielefeld.de/avikom/go-types/avikom/assistance";
option java_package = "app.avikom.types.assistance";


/**
 * A service to store, alter and retrieve sessions.
 * @author Alexander Neumann <alneuman@techfak.uni-bielefeld.de>
 **/
service SessionStorageService {
  /// stores a sesion; if it exists it will be updated.
  rpc SaveSession(Session) returns (avikom.generic.Result) {
  }

  /// retrieves a single session; `SessionQuery` must return a single session
  rpc GetSession(SessionQuery) returns (Session) {
    option (google.api.http) = {
      get: "/v1/storage/sessions/{id}"
    };
  }

  /// returns all currently stored sessions
  rpc GetAllSessions(google.protobuf.Empty) returns (SessionList) {
    option (google.api.http) = {
      get: "/v1/storage/sessions"
    };
  }

  /// deletes (a) session(s); deletes all sessions that fulfill `SessionQuery`
  rpc DeleteSession(SessionQuery) returns (avikom.generic.Result) {
    option (google.api.http) = {
      delete: "/v1/storage/sessions/{id}"
    };
  }
}

/**
 * A list of sessions with just one field.
 * @author Alexander Neumann <alneuman@techfak.uni-bielefeld.de>
 **/
message SessionList {
  repeated Session sessions = 1;   /// session list
}
