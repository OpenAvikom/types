syntax = "proto3";

package avikom.assistance;

import "avikom/options/options.proto";
import "avikom/assistance/scene.proto";
import "avikom/assistance/task.proto";
import "avikom/assistance/runtime_task_step.proto";
import "avikom/camunda/external_task.proto";
import "avikom/generic/peer.proto";
import "avikom/generic/user_profile.proto";
import "avikom/generic/modality.proto";

option csharp_namespace = "Avikom.Types.Assistance";
option go_package = "gitlab.ub.uni-bielefeld.de/avikom/go-types/avikom/assistance";
option java_package = "app.avikom.types.assistance";


/*
 * A (serializable) version of a session.
 * Data should only be stored in json format if the represented data cannot be generalized.
 * Note that sessions might contain temporal data that cannot be stored because of their short-times lifespan or due to serializiation limitations.
 * For these cases, separate setup and tear down strategies should be considered.
 * @author Alexander Neumann <alneuman@techfak.uni-bielefeld.de>
 */
message Session {
  option (avikom.options.schema_definition) = true;

  string id = 1 [(avikom.options.schema).unique = true];  /// session ID; generated by `SessionService`
  Scene scene = 2;                                        /// current scene; only the scene unique identifier (name) must be provided
  repeated avikom.generic.Peer peers = 3;                 /// a list of peers available in the session; only the unique identifier (name) must be provided
  repeated RuntimeTaskStep current = 4;                   /// list of currently eligible `RuntimeTaskSteps`
  avikom.generic.UserProfile profile = 5;                 /// profile of the session's user
  Task task = 6;                                          /// currently conducted task
  avikom.generic.Modality modal_affinity = 7;             /// environmental factors of the session's context
  string json_data = 10;                                  /// used for session/task-specific data;
}
