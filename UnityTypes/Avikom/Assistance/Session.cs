
using UnityEngine;
using Avikom.UnityAssets.Variables;
using Avikom.UnityAssets.Sets;
using Avikom.UnityAssets.Events;
using Google.Protobuf;


namespace Avikom.UnityTypes.Assistance
{

    /** A (serializable) version of a session.
    Data should only be stored in json format if the represented data cannot be generalized.
    Note that sessions might contain temporal data that cannot be stored because of their short-times lifespan or due to serializiation limitations.
    For these cases, separate setup and tear down strategies should be considered.
    @author Alexander Neumann <alneuman@techfak.uni-bielefeld.de> */
    [CreateAssetMenu(menuName = "Avikom/Assistance/Session")]
    public class Session : GameEvent<Session>, IGameEvent
    {
        public static Avikom.Types.Assistance.Session TypeDefault = null;
        // session ID; generated by `SessionService`
        public StringVariable Id;

        // current scene; only the scene unique identifier (name) must be provided
        public Avikom.UnityTypes.Assistance.Scene Scene;

        // a list of peers available in the session; only the unique identifier (name) must be provided
        public Avikom.UnityTypes.Generic.Peer Peers;

        // list of currently eligible `RuntimeTaskSteps`
        public Avikom.UnityTypes.Assistance.RuntimeTaskStep Current;

        // profile of the session's user
        public Avikom.UnityTypes.Generic.UserProfile Profile;

        // currently conducted task
        public Avikom.UnityTypes.Assistance.Task Task;

        // environmental factors of the session's context
        public Avikom.UnityTypes.Generic.Modality ModalAffinity;

        // used for session/task-specific data;
        public StringVariable JsonData;


        public void Raise()
        {
            Raise(this);
        }

        public void SetValue(Avikom.Types.Assistance.Session proto)
        {

            if (Id == null) { Id = ScriptableObject.CreateInstance<StringVariable>(); }
            if (proto.Id != StringVariable.TypeDefault)
            {
                Id.SetValue(proto.Id);
            }

            if (Scene == null) { Scene = ScriptableObject.CreateInstance<Avikom.UnityTypes.Assistance.Scene>(); }
            if (proto.Scene != Avikom.UnityTypes.Assistance.Scene.TypeDefault)
            {
                Scene.SetValue(proto.Scene);
            }

            if (Peers == null) { Peers = ScriptableObject.CreateInstance<Avikom.UnityTypes.Generic.Peer>(); }
            if (proto.Peers != Avikom.UnityTypes.Generic.Peer.TypeDefault)
            {
                Peers.SetValue(proto.Peers);
            }

            if (Current == null) { Current = ScriptableObject.CreateInstance<Avikom.UnityTypes.Assistance.RuntimeTaskStep>(); }
            if (proto.Current != Avikom.UnityTypes.Assistance.RuntimeTaskStep.TypeDefault)
            {
                Current.SetValue(proto.Current);
            }

            if (Profile == null) { Profile = ScriptableObject.CreateInstance<Avikom.UnityTypes.Generic.UserProfile>(); }
            if (proto.Profile != Avikom.UnityTypes.Generic.UserProfile.TypeDefault)
            {
                Profile.SetValue(proto.Profile);
            }

            if (Task == null) { Task = ScriptableObject.CreateInstance<Avikom.UnityTypes.Assistance.Task>(); }
            if (proto.Task != Avikom.UnityTypes.Assistance.Task.TypeDefault)
            {
                Task.SetValue(proto.Task);
            }

            if (ModalAffinity == null) { ModalAffinity = ScriptableObject.CreateInstance<Avikom.UnityTypes.Generic.Modality>(); }
            if (proto.ModalAffinity != Avikom.UnityTypes.Generic.Modality.TypeDefault)
            {
                ModalAffinity.SetValue(proto.ModalAffinity);
            }

            if (JsonData == null) { JsonData = ScriptableObject.CreateInstance<StringVariable>(); }
            if (proto.JsonData != StringVariable.TypeDefault)
            {
                JsonData.SetValue(proto.JsonData);
            }
            Raise();
        }

        public void SetValue(Session other)
        {
            if (!other) { return; }

            if (Id == null)
            {
                Id = other.Id;
            }
            else if (other.Id != null)
            {
                Id.SetValue(other.Id);
            }

            if (Scene == null)
            {
                Scene = other.Scene;
            }
            else if (other.Scene != null)
            {
                Scene.SetValue(other.Scene);
            }

            if (Peers == null)
            {
                Peers = other.Peers;
            }
            else if (other.Peers != null)
            {
                Peers.SetValue(other.Peers);
            }

            if (Current == null)
            {
                Current = other.Current;
            }
            else if (other.Current != null)
            {
                Current.SetValue(other.Current);
            }

            if (Profile == null)
            {
                Profile = other.Profile;
            }
            else if (other.Profile != null)
            {
                Profile.SetValue(other.Profile);
            }

            if (Task == null)
            {
                Task = other.Task;
            }
            else if (other.Task != null)
            {
                Task.SetValue(other.Task);
            }

            if (ModalAffinity == null)
            {
                ModalAffinity = other.ModalAffinity;
            }
            else if (other.ModalAffinity != null)
            {
                ModalAffinity.SetValue(other.ModalAffinity);
            }

            if (JsonData == null)
            {
                JsonData = other.JsonData;
            }
            else if (other.JsonData != null)
            {
                JsonData.SetValue(other.JsonData);
            }
            Raise();
        }

        public Avikom.Types.Assistance.Session GetValue()
        {
            var proto = new Avikom.Types.Assistance.Session();
            proto.Id = Id?.GetValue() ?? proto.Id;
            proto.Scene = Scene?.GetValue() ?? proto.Scene;
            proto.Peers = Peers?.GetValue() ?? proto.Peers;
            proto.Current = Current?.GetValue() ?? proto.Current;
            proto.Profile = Profile?.GetValue() ?? proto.Profile;
            proto.Task = Task?.GetValue() ?? proto.Task;
            proto.ModalAffinity = ModalAffinity?.GetValue() ?? proto.ModalAffinity;
            proto.JsonData = JsonData?.GetValue() ?? proto.JsonData;
            return proto;
        }
    }

}
